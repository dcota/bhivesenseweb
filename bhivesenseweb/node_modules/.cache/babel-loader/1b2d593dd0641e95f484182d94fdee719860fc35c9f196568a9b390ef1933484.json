{"ast":null,"code":"import en from \"../assets/en.js\";\nimport pt from \"../assets/pt.js\";\nimport axios from \"axios\";\nimport { notify } from \"@kyvg/vue3-notification\";\nimport { mapGetters } from \"vuex\";\nimport { GET_USER_TOKEN_GETTER, GET_USER_LEVEL_GETTER, GET_USER_ID_GETTER } from \"../store/storeconstants\";\nexport default {\n  name: \"new intervention\",\n  mixins: [en, pt],\n  data() {\n    const date = new Date();\n    const year = date.getFullYear();\n    const month = date.getMonth();\n    const day = date.getDay();\n    const lang = localStorage.getItem(\"lang\") || \"en\";\n    return {\n      range: {\n        start: new Date(),\n        end: new Date()\n      },\n      form: {\n        description: \"\",\n        observations: \"\",\n        type: \"\",\n        notifications: true\n      },\n      isShow: false,\n      lang: lang\n    };\n  },\n  computed: {\n    ...mapGetters(\"auth\", {\n      token: GET_USER_TOKEN_GETTER,\n      level: GET_USER_LEVEL_GETTER,\n      _id: GET_USER_ID_GETTER\n    })\n  },\n  methods: {\n    async send() {\n      this.isShow = true;\n      if (this.checkForm() == true) {\n        this.isShow = false;\n        console.log(this.range.start.getFullYear());\n        console.log(this.form.type);\n      } else {\n        this.isShow = false;\n        notify({\n          title: this.translate(\"notifErrorTitle\"),\n          text: this.translate(\"mesFieldsIntervention\"),\n          type: \"error\",\n          duration: 3000,\n          speed: 500\n        });\n      }\n\n      /*let postData = {\r\n          apiary: localStorage.getItem(\"idtointerventions\"),\r\n          description: this.form.description,\r\n          date: this.form.date,\r\n          observations: this.form.observations,\r\n          notifications: this.form.notifications,\r\n      };\r\n      //postData.append(\"lang\", this.lang); //enviar se necessário para e-mail\r\n      if (this.checkForm() == true) {\r\n          this.isShow = true;\r\n          await axios\r\n              .post(\"https://bhsapi.duartecota.com/intervention\", postData, {\r\n                  headers: {\r\n                      Authorization: this.token,\r\n                  },\r\n              })\r\n              .then((response) => {\r\n                  if (response.data.http == 201) {\r\n                      this.isShow = false;\r\n                      this.message.type = \"success\";\r\n                      this.message.msg = this.translate(\"mesNewApiarySuccess\");\r\n                      notify({\r\n                          title: this.translate(\"notifSuccessTitle\"),\r\n                          text: this.translate(\"mesNewInterventionSuccess\"),\r\n                          type: \"success\",\r\n                          duration: 3000,\r\n                          speed: 500,\r\n                      });\r\n                      this.$router.replace(\"apiaries\");\r\n                  } else {\r\n                      this.isShow = false;\r\n                      notify({\r\n                          title: this.translate(\"notifErrorTitle\"),\r\n                          text: this.translate(\"mesProblem\"),\r\n                          type: \"success\",\r\n                          duration: 3000,\r\n                          speed: 500,\r\n                      });\r\n                  }\r\n              })\r\n              .catch((error) => {\r\n                  this.isShow = false;\r\n                  notify({\r\n                      title: this.translate(\"notifErrorTitle\"),\r\n                      text: this.translate(\"mesProblem\"),\r\n                      type: \"error\",\r\n                      duration: 3000,\r\n                      speed: 500,\r\n                  });\r\n              });\r\n      } else {\r\n          this.isShow = false;\r\n          notify({\r\n              title: this.translate(\"notifErrorTitle\"),\r\n              text: this.translate(\"mesFieldsIntervention\"),\r\n              type: \"error\",\r\n              duration: 3000,\r\n              speed: 500,\r\n          });\r\n      }*/\n    },\n\n    cleanForm() {\n      this.form.description = \"\", this.form.observations = \"\", this.form.type = \"\";\n      this.form.notifications = true, this.range.start = new Date(), this.range.end = new Date(), this.isShow = false;\n    },\n    back() {\n      this.$router.replace(\"interventions\");\n    },\n    checkForm() {\n      if (this.form.description == \"\" || this.form.type == \"\") {\n        this.isShow = false;\n        notify({\n          title: this.translate(\"notifErrorTitle\"),\n          text: this.translate(\"mesFieldsIntervention\"),\n          type: \"error\",\n          duration: 3000,\n          speed: 500\n        });\n        return false;\n      } else {\n        return true;\n      }\n    },\n    translate(prop) {\n      return this[this.lang][prop];\n    },\n    dayClicked(day) {\n      alert(this.range.start + ';' + this.range.end);\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["en","pt","axios","notify","mapGetters","GET_USER_TOKEN_GETTER","GET_USER_LEVEL_GETTER","GET_USER_ID_GETTER","name","mixins","data","date","Date","year","getFullYear","month","getMonth","day","getDay","lang","localStorage","getItem","range","start","end","form","description","observations","type","notifications","isShow","computed","token","level","_id","methods","send","checkForm","console","log","title","translate","text","duration","speed","cleanForm","back","$router","replace","prop","dayClicked","alert"],"sourceRoot":"","sources":["C:\\Users\\duart\\Desktop\\bhivesenseweb\\bhivesenseweb\\src\\views\\Newinterventionalt.vue"],"sourcesContent":["/*\r\nMEIW - Programação Web Avançada - projeto final\r\nAuhtor: Duarte Cota\r\nDescription: implementation of the view Ficha de Inscrição\r\n*/\r\n\r\n<template>\r\n  <section class=\"scrolling-component\" ref=\"scrollcomponent\" name=\"lang\">\r\n    <section class=\"container my-body\">\r\n    <hr />\r\n    <h1 class=\"text-center\">\r\n    {{ translate(\"formNewInterventionTitle\") }}\r\n    </h1> \r\n    <hr />\r\n    <form class=\"form-signin\" v-on:submit.prevent=\"send\">\r\n    <section class=\"row\">\r\n    <section class=\"col-md-6 g-4\">\r\n    <label for=\"bdate\" class=\"form-label\">{{\r\n    translate(\"formNewInterventionDate\")\r\n    }}</label>\r\n    <v-date-picker :locale=\"lang\" is-expanded v-model=\"range\" is-range is24hr mode=\"datetime\" />\r\n    </section>\r\n    <section class=\"col-md-6 g-4\">\r\n    <label for=\"observations\" class=\"form-label\">{{\r\n    translate(\"formNewInterventionDescription\")\r\n    }}</label>\r\n    <textarea rows=\"5\" v-model=\"form.description\" class=\"form-control\" id=\"username\"\r\n    style=\"font-size: small\" />\r\n    <label for=\"observations\" class=\"form-label\">{{\r\n    translate(\"formNewApiaryObservations\")\r\n    }}</label>\r\n    <textarea rows=\"5\" v-model=\"form.observations\" class=\"form-control\" id=\"username\"\r\n    style=\"font-size: small\" />\r\n    <label for=\"type\" class=\"form-label\">{{\r\n    translate(\"selectLbl\")\r\n    }}</label>\r\n\r\n    <section class=\"my_radios\">\r\n        <div class=\"form-check\">\r\n  <input class=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault1\">\r\n  <label class=\"form-check-label\" for=\"flexRadioDefault1\">\r\n    Default radio\r\n  </label>\r\n</div>\r\n<div class=\"form-check\">\r\n  <input class=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault2\" checked>\r\n  <label class=\"form-check-label\" for=\"flexRadioDefault2\">\r\n    Default checked radio\r\n  </label>\r\n</div>\r\n    </section>\r\n    \r\n\r\n    <section class=\"form-check mt-3\">\r\n    <input class=\"form-check-input\" type=\"checkbox\" v-model=\"form.notifications\" value=\"\"\r\n    id=\"subscribenews\" checked style=\"text-align: left: important;\" />\r\n    <label class=\"form-check-label\" for=\"subscribenews\">\r\n    {{ translate(\"formNewInterventionNotifications\") }}</label>\r\n    </section>\r\n\r\n    </section>\r\n\r\n    </section>\r\n\r\n\r\n    <section class=\"text-center\">\r\n        <button type=\"submit\" class=\"btn mt-4 me-4 my-button\">\r\n        {{ translate(\"btnSubmit\") }}\r\n        </button>\r\n        <button @click=\"cleanForm\" type=\"button\" class=\"btn mt-4 me-4 my-button\">\r\n        {{ translate(\"btnClean\") }}\r\n        </button>\r\n        <button @click=\"back\" type=\"button\" class=\"btn mt-4 my-button\">\r\n        {{ translate(\"btnBack\") }}\r\n        </button>\r\n    </section>\r\n    </form>\r\n\r\n    <section class=\"text-center\">\r\n    <section v-if=\"isShow\" class=\"text-center\">\r\n    <section class=\"spinner-border mt-4\" role=\"status\">\r\n    <span class=\"visually-hidden\">Loading...</span>\r\n    </section>\r\n    <section class=\"mb-2\">{{ translate(\"spinnerTxt\") }}</section>\r\n    </section>\r\n    </section>\r\n    <section class=\"spacer\"></section>\r\n    </section>\r\n  </section>\r\n</template>\r\n\r\n<style scoped>\r\n.my_radios {\r\n    background-color:white\r\n}\r\n.my-button {\r\n    width: 120px;\r\n    background-color: black;\r\n    color: white;\r\n}\r\n\r\n.my-button:hover {\r\n    background-color: white;\r\n    color: black;\r\n}\r\n\r\nselect option[disabled]:first-child {\r\n    display: none;\r\n}\r\n\r\n.my-body {\r\n    margin-top: 100px;\r\n}\r\n\r\n.spacer {\r\n    height: 200px;\r\n}\r\n\r\n.top-btn {\r\n    font-weight: bold;\r\n    width: 100px;\r\n}\r\n</style>\r\n\r\n<script>\r\nimport en from \"../assets/en.js\";\r\nimport pt from \"../assets/pt.js\";\r\nimport axios from \"axios\";\r\nimport { notify } from \"@kyvg/vue3-notification\";\r\nimport { mapGetters } from \"vuex\";\r\nimport {\r\n    GET_USER_TOKEN_GETTER,\r\n    GET_USER_LEVEL_GETTER,\r\n    GET_USER_ID_GETTER,\r\n} from \"../store/storeconstants\";\r\nexport default {\r\n    name: \"new intervention\",\r\n    mixins: [en, pt],\r\n    data() {\r\n        const date = new Date();\r\n        const year = date.getFullYear();\r\n        const month = date.getMonth();\r\n        const day = date.getDay();\r\n        const lang = localStorage.getItem(\"lang\") || \"en\"\r\n        return {\r\n            range: {\r\n                    start: new Date(),\r\n                    end: new Date(),\r\n                },\r\n            form: {\r\n                description: \"\",\r\n                observations: \"\",\r\n                type: \"\",\r\n                notifications: true,\r\n                \r\n            },\r\n            isShow: false,\r\n            lang: lang,\r\n        };\r\n    },\r\n    computed: {\r\n        ...mapGetters(\"auth\", {\r\n            token: GET_USER_TOKEN_GETTER,\r\n            level: GET_USER_LEVEL_GETTER,\r\n            _id: GET_USER_ID_GETTER,\r\n        }),\r\n        \r\n    },\r\n    methods: {\r\n        async send() {\r\n            this.isShow=true;\r\n            if(this.checkForm()==true) {\r\n                this.isShow = false;\r\n                console.log(this.range.start.getFullYear())\r\n                console.log(this.form.type)\r\n            }\r\n            else {\r\n                this.isShow = false;\r\n                notify({\r\n                    title: this.translate(\"notifErrorTitle\"),\r\n                    text: this.translate(\"mesFieldsIntervention\"),\r\n                    type: \"error\",\r\n                    duration: 3000,\r\n                    speed: 500,\r\n                });\r\n            }\r\n\r\n            /*let postData = {\r\n                apiary: localStorage.getItem(\"idtointerventions\"),\r\n                description: this.form.description,\r\n                date: this.form.date,\r\n                observations: this.form.observations,\r\n                notifications: this.form.notifications,\r\n            };\r\n            //postData.append(\"lang\", this.lang); //enviar se necessário para e-mail\r\n            if (this.checkForm() == true) {\r\n                this.isShow = true;\r\n                await axios\r\n                    .post(\"https://bhsapi.duartecota.com/intervention\", postData, {\r\n                        headers: {\r\n                            Authorization: this.token,\r\n                        },\r\n                    })\r\n                    .then((response) => {\r\n                        if (response.data.http == 201) {\r\n                            this.isShow = false;\r\n                            this.message.type = \"success\";\r\n                            this.message.msg = this.translate(\"mesNewApiarySuccess\");\r\n                            notify({\r\n                                title: this.translate(\"notifSuccessTitle\"),\r\n                                text: this.translate(\"mesNewInterventionSuccess\"),\r\n                                type: \"success\",\r\n                                duration: 3000,\r\n                                speed: 500,\r\n                            });\r\n                            this.$router.replace(\"apiaries\");\r\n                        } else {\r\n                            this.isShow = false;\r\n                            notify({\r\n                                title: this.translate(\"notifErrorTitle\"),\r\n                                text: this.translate(\"mesProblem\"),\r\n                                type: \"success\",\r\n                                duration: 3000,\r\n                                speed: 500,\r\n                            });\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        this.isShow = false;\r\n                        notify({\r\n                            title: this.translate(\"notifErrorTitle\"),\r\n                            text: this.translate(\"mesProblem\"),\r\n                            type: \"error\",\r\n                            duration: 3000,\r\n                            speed: 500,\r\n                        });\r\n                    });\r\n            } else {\r\n                this.isShow = false;\r\n                notify({\r\n                    title: this.translate(\"notifErrorTitle\"),\r\n                    text: this.translate(\"mesFieldsIntervention\"),\r\n                    type: \"error\",\r\n                    duration: 3000,\r\n                    speed: 500,\r\n                });\r\n            }*/\r\n        },\r\n        cleanForm() {\r\n            this.form.description = \"\",\r\n                this.form.observations = \"\",\r\n                this.form.type=\"\"\r\n                this.form.notifications = true,\r\n                this.range.start=new Date(),\r\n                this.range.end=new Date(),\r\n                this.isShow = false;\r\n        },\r\n        back() {\r\n            this.$router.replace(\"interventions\");\r\n        },\r\n        checkForm() {\r\n            if (this.form.description == \"\" || this.form.type==\"\") {\r\n                this.isShow = false;\r\n                notify({\r\n                    title: this.translate(\"notifErrorTitle\"),\r\n                    text: this.translate(\"mesFieldsIntervention\"),\r\n                    type: \"error\",\r\n                    duration: 3000,\r\n                    speed: 500,\r\n                });\r\n                return false;\r\n            } else {\r\n                return true;\r\n            }\r\n        },\r\n        translate(prop) {\r\n            return this[this.lang][prop];\r\n        },\r\n        dayClicked(day) {\r\n            alert(this.range.start + ';' + this.range.end);\r\n        },\r\n    },\r\n};\r\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}