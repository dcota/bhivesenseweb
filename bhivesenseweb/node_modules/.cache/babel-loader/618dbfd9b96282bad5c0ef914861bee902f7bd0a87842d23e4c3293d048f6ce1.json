{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container my-body\"\n};\nconst _hoisted_2 = {\n  class: \"my-text-color\"\n};\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"section\", {\n  class: \"line-1\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_4 = {\n  class: \"mt-4\"\n};\nconst _hoisted_5 = {\n  key: 0\n};\nconst _hoisted_6 = {\n  key: 1,\n  class: \"spinner-border spinner-border-sm\",\n  role: \"status\"\n};\nconst _hoisted_7 = {\n  key: 0\n};\nconst _hoisted_8 = {\n  key: 1,\n  class: \"spinner-border spinner-border-sm\",\n  role: \"status\"\n};\nconst _hoisted_9 = {\n  key: 0,\n  class: \"mt-4\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_calendar = _resolveComponent(\"v-calendar\");\n  return _openBlock(), _createElementBlock(\"section\", _hoisted_1, [_createElementVNode(\"h2\", _hoisted_2, _toDisplayString($options.translate(\"interventionsTitle\")), 1 /* TEXT */), _hoisted_3, _createElementVNode(\"section\", _hoisted_4, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.formNew && $options.formNew(...args)),\n    class: \"btn my-button me-3\"\n  }, [!$data.isShow ? (_openBlock(), _createElementBlock(\"section\", _hoisted_5, _toDisplayString($options.translate(\"btnNew\")), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"section\", _hoisted_6))]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.back && $options.back(...args)),\n    class: \"btn my-button\"\n  }, [!$data.isShow ? (_openBlock(), _createElementBlock(\"section\", _hoisted_7, _toDisplayString($options.translate(\"btnBack\")), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"section\", _hoisted_8))])]), $data.hasInterventions != false ? (_openBlock(), _createElementBlock(\"section\", _hoisted_9, [_createVNode(_component_v_calendar, {\n    locale: $data.lang,\n    \"is-expanded\": \"\",\n    attributes: $options.attributes,\n    rows: 1,\n    columns: 3,\n    onDayclick: $options.dayClicked\n  }, null, 8 /* PROPS */, [\"locale\", \"attributes\", \"onDayclick\"])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"mappings":";;EACWA,KAAK,EAAC;AAAmB;;EAC5BA,KAAK,EAAC;AAAe;gCACzBC,oBAAkC;EAAzBD,KAAK,EAAC;AAAQ;;EACdA,KAAK,EAAC;AAAM;;;;;;EAOfA,KAAK,EAAC,kCAAkC;EACxCE,IAAI,EAAC;;;;;;;EASLF,KAAK,EAAC,kCAAkC;EACxCE,IAAI,EAAC;;;;EAKFF,KAAK,EAAC;;;;uBA1BjBG,oBAqCU,WArCVC,UAqCU,GApCRH,oBAAoE,MAApEI,UAAoE,mBAAvCC,kBAAS,wCACtCC,UAAkC,EAClCN,oBAqBU,WArBVO,UAqBU,GApBRP,oBASS;IATAQ,OAAK,yCAAEH,6CAAO;IAAEN,KAAK,EAAC;OACbU,YAAM,kBAAtBP,oBAEU,wCADLG,kBAAS,6CAEdH,oBAIW,WAJXQ,UAIW,MAEbV,oBASS;IATAQ,OAAK,yCAAEH,uCAAI;IAAEN,KAAK,EAAC;OACVU,YAAM,kBAAtBP,oBAEU,wCADLG,kBAAS,8CAEdH,oBAIW,WAJXS,UAIW,QAIaF,sBAAgB,2BAA5CP,oBAUU,WAVVU,UAUU,GATRC,aAQaC;IAPVC,MAAM,EAAEN,UAAI;IACb,aAAW,EAAX,EAAW;IACVO,UAAU,EAAEX,mBAAU;IACtBY,IAAI,EAAE,CAAC;IACPC,OAAO,EAAE,CAAC;IACVC,UAAQ,EAAEd","names":["class","_createElementVNode","role","_createElementBlock","_hoisted_1","_hoisted_2","$options","_hoisted_3","_hoisted_4","onClick","$data","_hoisted_6","_hoisted_8","_hoisted_9","_createVNode","_component_v_calendar","locale","attributes","rows","columns","onDayclick"],"sourceRoot":"","sources":["C:\\Users\\duart\\OneDrive - PGA\\Ambiente de Trabalho\\bhivesenseweb\\bhivesenseweb\\src\\views\\Interventionsalt.vue"],"sourcesContent":["<template>\r\n  <section class=\"container my-body\">\r\n    <h2 class=\"my-text-color\">{{ translate(\"interventionsTitle\") }}</h2>\r\n    <section class=\"line-1\"></section>\r\n    <section class=\"mt-4\">\r\n      <button @click=\"formNew\" class=\"btn my-button me-3\">\r\n        <section v-if=\"!isShow\">\r\n          {{ translate(\"btnNew\") }}\r\n        </section>\r\n        <section\r\n          v-else\r\n          class=\"spinner-border spinner-border-sm\"\r\n          role=\"status\"\r\n        ></section>\r\n      </button>\r\n      <button @click=\"back\" class=\"btn my-button\">\r\n        <section v-if=\"!isShow\">\r\n          {{ translate(\"btnBack\") }}\r\n        </section>\r\n        <section\r\n          v-else\r\n          class=\"spinner-border spinner-border-sm\"\r\n          role=\"status\"\r\n        ></section>\r\n      </button>\r\n    </section>\r\n\r\n    <section class=\"mt-4\" v-if=\"hasInterventions != false\">\r\n      <v-calendar\r\n        :locale=\"lang\"\r\n        is-expanded\r\n        :attributes=\"attributes\"\r\n        :rows=\"1\"\r\n        :columns=\"3\"\r\n        @dayclick=\"dayClicked\"\r\n      >\r\n      </v-calendar>\r\n    </section>\r\n  </section>\r\n</template>\r\n\r\n<style scoped>\r\n</style>\r\n\r\n<script>\r\n  import en from \"../assets/en.js\";\r\n  import pt from \"../assets/pt.js\";\r\n  import axios from \"axios\";\r\n  import { notify } from \"@kyvg/vue3-notification\";\r\n  export default {\r\n    mixins: [en, pt],\r\n    data() {\r\n      const lang = localStorage.getItem(\"lang\") || \"pt\";\r\n      return {\r\n        interventions: [],\r\n        lang: lang,\r\n        isShow: false,\r\n        hasInterventions: false,\r\n      };\r\n    },\r\n    computed: {\r\n      attributes() {\r\n        return [\r\n          ...this.interventions.map((todo) => ({\r\n            _id: todo._id,\r\n            dates: todo.dates,\r\n            highlight: {\r\n              color: todo.color,\r\n              start: { fillMode: \"solid\", color: todo.color },\r\n              base: { fillMode: \"light\", color: todo.color },\r\n              end: { fillMode: \"solid\", color: todo.color },\r\n              //order: todo.order,\r\n              //class: todo.isComplete ? \"opacity-50\" : \"\",\r\n            },\r\n            popover: {\r\n              label: todo.description,\r\n              visibility: \"hover\",\r\n            },\r\n          })),\r\n        ];\r\n      },\r\n    },\r\n    mounted() {\r\n      this.getInterventions();\r\n    },\r\n    methods: {\r\n      async getInterventions() {\r\n        this.interventions = [];\r\n        this.isShow = true;\r\n        await axios\r\n          .get(\r\n            \"https://bhsapi.duartecota.com/intervention/apiary/\" +\r\n              localStorage.getItem(\"idtointerventions\"),\r\n            {\r\n              headers: {\r\n                Authorization: this.token,\r\n              },\r\n            }\r\n          )\r\n          .then((response) => {\r\n            this.isShow = false;\r\n            if (response.data.body.length == 0) {\r\n              this.hasInterventions = false;\r\n              notify({\r\n                title: this.translate(\"notifWarningTitle\"),\r\n                text: this.translate(\"mesNoInterventions\"),\r\n                type: \"warn\",\r\n                duration: 3000,\r\n                speed: 500,\r\n              });\r\n            } else {\r\n              this.hasInterventions = true;\r\n              this.interventions = [];\r\n              let resArray = response.data.body;\r\n              for (let i = 0; i < resArray.length; i++) {\r\n                let sd = new Date(resArray[i].startDate);\r\n                let ed = new Date(resArray[i].endDate);\r\n                console.log(sd + \";\" + ed);\r\n                let dates = \"\";\r\n                dates = {\r\n                  start: sd,\r\n                  end: ed,\r\n                };\r\n                let color;\r\n                if (resArray[i].type == 1) color = \"green\";\r\n                else if (resArray[i].type == 2) color = \"orange\";\r\n                else color = \"red\";\r\n                this.interventions.push({\r\n                  _id: resArray[i]._id,\r\n                  color: color,\r\n                  dates: dates,\r\n                  description: resArray[i].description,\r\n                  startTime: resArray[i].startTime,\r\n                  endTime: resArray[i].endTime,\r\n                  observations: resArray[i].observations,\r\n                });\r\n              }\r\n              console.log(this.interventions);\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            this.isShow = false;\r\n            notify({\r\n              title: this.translate(\"notifErrorTitle\"),\r\n              text: this.translate(\"mesProblem\"),\r\n              type: \"error\",\r\n              duration: 3000,\r\n              speed: 500,\r\n            });\r\n          });\r\n      },\r\n      translate(prop) {\r\n        return this[this.lang][prop];\r\n      },\r\n      padTo2Digits(num) {\r\n        return String(num).padStart(2, \"0\");\r\n      },\r\n      dayClicked(day) {\r\n        let date = new Date(day.id);\r\n        console.log(\"dayClicked: \" + day.id);\r\n        console.log(\"dayClicked: \" + date.getTime()); //get timestamp of date\r\n        for (let i = 0; i < this.interventions.length; i++) {\r\n          let sd = new Date(this.interventions[i].dates.start);\r\n          let sdConv = this.padTo2Digits(\r\n            sd.toLocaleDateString(\"sv-SE\", {\r\n              year: \"numeric\",\r\n              month: \"2-digit\",\r\n              day: \"2-digit\",\r\n            })\r\n          );\r\n          console.log(sdConv);\r\n          let sdFinal = new Date(sdConv);\r\n          let ed = new Date(this.interventions[i].dates.end);\r\n          let edConv = this.padTo2Digits(\r\n            ed.toLocaleDateString(\"sv-SE\", {\r\n              year: \"numeric\",\r\n              month: \"2-digit\",\r\n              day: \"2-digit\",\r\n            })\r\n          );\r\n          let edFinal = new Date(edConv);\r\n          if (\r\n            date.getTime() >= sdFinal.getTime() ||\r\n            date.getTime() <= edFinal.getTime()\r\n          ) {\r\n            console.log(this.interventions[i].observations);\r\n            break;\r\n          }\r\n        }\r\n      },\r\n      back() {\r\n        this.$router.push(\"apiaries\");\r\n      },\r\n      formNew() {\r\n        this.$router.push(\"newintervention\");\r\n      },\r\n    },\r\n  };\r\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}