{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport en from \"../assets/en.js\";\nimport pt from \"../assets/pt.js\";\nimport axios from \"axios\";\nimport { notify } from \"@kyvg/vue3-notification\";\nimport ModalDeleteIntervention from \"../components/ModalDeleteIntervention.vue\";\nimport { mapGetters } from \"vuex\";\nimport { GET_USER_TOKEN_GETTER, GET_USER_LEVEL_GETTER, GET_USER_ID_GETTER } from \"../store/storeconstants\";\n//import { LOADING_SPINNER_SHOW_MUTATION } from \"../store/storeconstants\";\nexport default {\n  mixins: [en, pt],\n  components: {\n    ModalDeleteIntervention\n  },\n  data() {\n    const lang = localStorage.getItem(\"lang\") || \"pt\";\n    return {\n      data: localStorage.token,\n      interventions: [],\n      isShow: false,\n      lang: lang,\n      isModalDeleteVisible: false,\n      interventiontodelete: \"\"\n    };\n  },\n  computed: {\n    ...mapGetters(\"auth\", {\n      token: GET_USER_TOKEN_GETTER,\n      level: GET_USER_LEVEL_GETTER,\n      _id: GET_USER_ID_GETTER\n    })\n  },\n  mounted() {\n    this.getInterventions();\n  },\n  methods: {\n    translate(prop) {\n      return this[this.lang][prop];\n    },\n    async getInterventions() {\n      this.interventions = [];\n      this.isShow = true;\n      await axios.get(\"https://bhsapi.duartecota.com/intervention/apiary/\" + localStorage.getItem(\"idtointerventions\"), {\n        headers: {\n          Authorization: this.token\n        }\n      }).then(response => {\n        this.isShow = false;\n        if (response.data.body.length == 0) {\n          notify({\n            title: this.translate(\"notifWarningTitle\"),\n            text: this.translate(\"mesNoInterventions\"),\n            type: \"warn\",\n            duration: 3000,\n            speed: 500\n          });\n        } else {\n          let interventions = response.data.body;\n          for (let i = 0; i < interventions.length; i++) {\n            this.interventions.push({\n              _id: interventions[i]._id,\n              description: interventions[i].description,\n              date: interventions[i].date\n            });\n          }\n        }\n      }).catch(error => {\n        this.isShow = false;\n        notify({\n          title: this.translate(\"notifErrorTitle\"),\n          text: this.translate(\"mesProblem\"),\n          type: \"error\",\n          duration: 3000,\n          speed: 500\n        });\n      });\n    },\n    async delete() {\n      await axios.delete(\"https://bhsapi.duartecota.com/intervention/\" + localStorage.getItem(\"interventiontodelete\"), {\n        headers: {\n          Authorization: this.token\n        }\n      }).then(response => {\n        if (response.data.http == 200) {\n          this.isShow = false;\n          notify({\n            title: this.translate(\"notifSuccessTitle\"),\n            text: this.translate(\"deleteIntervetnionMessage\"),\n            type: \"success\",\n            duration: 3000,\n            speed: 500\n          });\n          this.getInterventions();\n        } else {\n          this.isShow = false;\n          notify({\n            title: this.translate(\"notifErrorTitle\"),\n            text: this.translate(\"mesProblem\"),\n            type: \"error\",\n            duration: 3000,\n            speed: 500\n          });\n        }\n      }).catch(() => {\n        this.isShow = false;\n        notify({\n          title: this.translate(\"notifErrorTitle\"),\n          text: this.translate(\"mesProblem\"),\n          type: \"error\",\n          duration: 3000,\n          speed: 500\n        });\n      });\n    },\n    async detail(id) {\n      this.isShow = true;\n      this.message.type = \"\";\n      this.message.msg = \"\";\n      //(this.isShow = true((this.message.type = \"\"))), (this.message.msg = \"\");\n      await axios.get(\"https://bhsapi.duartecota.com/user/\" + id, {\n        headers: {\n          Authorization: this.token\n        }\n      }).then(response => {\n        this.name = response.data.body.name;\n        let type = response.data.body.type;\n        switch (type) {\n          case \"Individual\":\n            this.type = this.translate(\"typeOp1\");\n            break;\n          case \"Company\":\n            this.type = this.translate(\"typeOp2\");\n            break;\n          case \"Companhia\":\n            this.type = this.translate(\"typeOp2\");\n            break;\n          case \"Association\":\n            this.type = this.translate(\"typeOp3\");\n            break;\n          case \"Associação\":\n            this.type = this.translate(\"typeOp3\");\n            break;\n        }\n        this.email = response.data.body.email;\n        this.bdate = response.data.body.bdate;\n        this.mobile = response.data.body.mobile;\n        this.nif = response.data.body.nif;\n        let notifications = response.data.body.notifications;\n        switch (notifications) {\n          case true:\n            this.notifications = this.translate(\"modalNotifTrue\");\n            break;\n          case false:\n            this.notifications = this.translate(\"modalNotifFalse\");\n            break;\n        }\n        let img = response.data.body.img;\n        this.img = response.data.body.img;\n        this.isShow = false;\n        return true;\n      }).catch(() => {\n        this.message.msg = \"Ocorreu um problema\";\n        this.message.type = \"warning\";\n        this.isShow = false;\n        return false;\n      });\n    },\n    deleteModal(id) {\n      localStorage.setItem(\"interventiontodelete\", id);\n      this.isModalDeleteVisible = true;\n    },\n    closeModalDelete() {\n      this.isModalDeleteVisible = false;\n    },\n    async deleteIntervention() {\n      await this.delete();\n      this.isModalDeleteVisible = false;\n    },\n    back() {\n      this.$router.replace(\"interventions\");\n    },\n    formNew() {\n      this.$router.replace(\"newintervention\");\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["en","pt","axios","notify","ModalDeleteIntervention","mapGetters","GET_USER_TOKEN_GETTER","GET_USER_LEVEL_GETTER","GET_USER_ID_GETTER","mixins","components","data","lang","localStorage","getItem","token","interventions","isShow","isModalDeleteVisible","interventiontodelete","computed","level","_id","mounted","getInterventions","methods","translate","prop","get","headers","Authorization","then","response","body","length","title","text","type","duration","speed","i","push","description","date","catch","error","delete","http","detail","id","message","msg","name","email","bdate","mobile","nif","notifications","img","deleteModal","setItem","closeModalDelete","deleteIntervention","back","$router","replace","formNew"],"sourceRoot":"","sources":["C:\\Users\\duart\\OneDrive - PGA\\Ambiente de Trabalho\\bhivesenseweb\\bhivesenseweb\\src\\views\\Interventions.vue"],"sourcesContent":["/*\r\nMEIW - Programação Web Avançada - projeto final\r\nAuhtor: Duarte Cota\r\nDescription: implementation of the view Gestão de Alunos (Admin)\r\n*/\r\n\r\n<template>\r\n  <section class=\"container my-body\">\r\n    <hr />\r\n    <h1 class=\"text-center\">{{ translate(\"interventionsTitle\") }}</h1>\r\n    <hr />\r\n\r\n    <section>\r\n      <button @click=\"formNew\" type=\"submit\" class=\"btn mt-4 me-4 my-button\">\r\n        {{ translate(\"btnNew\") }}\r\n      </button>\r\n    </section>\r\n    <section class=\"row mt-3\">\r\n      <h4>{{ translate(\"interventionsLbl\") }}</h4>\r\n    </section>\r\n    <section class=\"card mt-2\">\r\n      <section\r\n        class=\"card-body\"\r\n        style=\"\r\n          border-radius: 3px;\r\n          box-shadow: rgba(0, 0, 0, 0.25) 0px 14px 28px,\r\n            rgba(0, 0, 0, 0.22) 0px 10px 10px;\r\n        \"\r\n      >\r\n        <table class=\"table mt-2\">\r\n          <tbody>\r\n            <tr>\r\n              <th>{{ translate(\"thdInterventionsDesc\") }}</th>\r\n              <th class=\"text-center\">\r\n                {{ translate(\"thdInterventionsDate\") }}\r\n              </th>\r\n              <th class=\"text-center\">\r\n                {{ translate(\"thdInterventionsAction\") }}\r\n              </th>\r\n            </tr>\r\n            <tr\r\n              v-for=\"intervention of this.interventions\"\r\n              :key=\"intervention._id\"\r\n            >\r\n              <td>{{ intervention.description }}</td>\r\n              <td class=\"text-center\">{{ intervention.date }}</td>\r\n              <td class=\"text-center\">\r\n                <button\r\n                  data-bs-toggle=\"tooltip\"\r\n                  v-bind:title=\"translate('lblDetailsUser')\"\r\n                  data-bs-placement=\"bottom\"\r\n                  data-bs-custom-class=\"custom-tooltip\"\r\n                  @click=\"detailsModal(intervention._id)\"\r\n                  type=\"button\"\r\n                  class=\"btn btn-success btn-sm me-2 ac-btn\"\r\n                  style=\"width: 50px\"\r\n                >\r\n                  <i class=\"fas fa-search\" aria-hidden=\"true\"></i>\r\n                </button>\r\n                <button\r\n                  data-bs-toggle=\"tooltip\"\r\n                  v-bind:title=\"translate('lblDelete')\"\r\n                  data-bs-placement=\"bottom\"\r\n                  data-bs-custom-class=\"custom-tooltip\"\r\n                  @click=\"deleteModal(intervention._id)\"\r\n                  type=\"button\"\r\n                  class=\"btn btn-danger btn-sm me-2 ac-btn\"\r\n                  style=\"width: 50px\"\r\n                >\r\n                  <i class=\"far fa-trash-alt\" aria-hidden=\"true\"></i>\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </section>\r\n    </section>\r\n    <section class=\"text-center\">\r\n      <button @click=\"back()\" type=\"button\" class=\"btn mt-4 my-button\">\r\n        {{ translate(\"btnBack\") }}\r\n      </button>\r\n    </section>\r\n\r\n    <ModalDeleteIntervention\r\n      v-show=\"isModalDeleteVisible\"\r\n      @close=\"closeModalDelete\"\r\n      @deleteAction=\"deleteIntervention\"\r\n    />\r\n\r\n    <section class=\"text-center\">\r\n      <section v-if=\"isShow\" class=\"text-center\">\r\n        <section class=\"spinner-border mt-4\" role=\"status\">\r\n          <span class=\"visually-hidden\">Loading...</span>\r\n        </section>\r\n        <section class=\"mb-2\">{{ translate(\"spinnerTxt\") }}</section>\r\n      </section>\r\n    </section>\r\n    <section class=\"spacer\"></section>\r\n  </section>\r\n</template>\r\n\r\n<style scoped>\r\n.my-button {\r\n  width: 120px;\r\n  background-color: black;\r\n  color: white;\r\n}\r\n\r\n.my-button:hover {\r\n  background-color: white;\r\n  color: black;\r\n}\r\nselect option[disabled]:first-child {\r\n  display: none;\r\n}\r\n.ac-btn {\r\n  width: 120px;\r\n  color: white;\r\n  font-weight: bold;\r\n}\r\n\r\n.my-body {\r\n  margin-top: 100px;\r\n}\r\n.spacer {\r\n  height: 200px;\r\n}\r\n</style>\r\n\r\n<script>\r\n  import en from \"../assets/en.js\";\r\n  import pt from \"../assets/pt.js\";\r\n  import axios from \"axios\";\r\n  import { notify } from \"@kyvg/vue3-notification\";\r\n  import ModalDeleteIntervention from \"../components/ModalDeleteIntervention.vue\";\r\n  import { mapGetters } from \"vuex\";\r\n  import {\r\n    GET_USER_TOKEN_GETTER,\r\n    GET_USER_LEVEL_GETTER,\r\n    GET_USER_ID_GETTER,\r\n  } from \"../store/storeconstants\";\r\n  //import { LOADING_SPINNER_SHOW_MUTATION } from \"../store/storeconstants\";\r\n  export default {\r\n    mixins: [en, pt],\r\n    components: {\r\n      ModalDeleteIntervention,\r\n    },\r\n    data() {\r\n      const lang = localStorage.getItem(\"lang\") || \"pt\";\r\n      return {\r\n        data: localStorage.token,\r\n        interventions: [],\r\n        isShow: false,\r\n        lang: lang,\r\n        isModalDeleteVisible: false,\r\n        interventiontodelete: \"\",\r\n      };\r\n    },\r\n    computed: {\r\n      ...mapGetters(\"auth\", {\r\n        token: GET_USER_TOKEN_GETTER,\r\n        level: GET_USER_LEVEL_GETTER,\r\n        _id: GET_USER_ID_GETTER,\r\n      }),\r\n    },\r\n    mounted() {\r\n      this.getInterventions();\r\n    },\r\n    methods: {\r\n      translate(prop) {\r\n        return this[this.lang][prop];\r\n      },\r\n      async getInterventions() {\r\n        this.interventions = [];\r\n        this.isShow = true;\r\n        await axios\r\n          .get(\r\n            \"https://bhsapi.duartecota.com/intervention/apiary/\" +\r\n              localStorage.getItem(\"idtointerventions\"),\r\n            {\r\n              headers: {\r\n                Authorization: this.token,\r\n              },\r\n            }\r\n          )\r\n          .then((response) => {\r\n            this.isShow = false;\r\n            if (response.data.body.length == 0) {\r\n              notify({\r\n                title: this.translate(\"notifWarningTitle\"),\r\n                text: this.translate(\"mesNoInterventions\"),\r\n                type: \"warn\",\r\n                duration: 3000,\r\n                speed: 500,\r\n              });\r\n            } else {\r\n              let interventions = response.data.body;\r\n              for (let i = 0; i < interventions.length; i++) {\r\n                this.interventions.push({\r\n                  _id: interventions[i]._id,\r\n                  description: interventions[i].description,\r\n                  date: interventions[i].date,\r\n                });\r\n              }\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            this.isShow = false;\r\n            notify({\r\n              title: this.translate(\"notifErrorTitle\"),\r\n              text: this.translate(\"mesProblem\"),\r\n              type: \"error\",\r\n              duration: 3000,\r\n              speed: 500,\r\n            });\r\n          });\r\n      },\r\n      async delete() {\r\n        await axios\r\n          .delete(\r\n            \"https://bhsapi.duartecota.com/intervention/\" +\r\n              localStorage.getItem(\"interventiontodelete\"),\r\n            {\r\n              headers: {\r\n                Authorization: this.token,\r\n              },\r\n            }\r\n          )\r\n          .then((response) => {\r\n            if (response.data.http == 200) {\r\n              this.isShow = false;\r\n              notify({\r\n                title: this.translate(\"notifSuccessTitle\"),\r\n                text: this.translate(\"deleteIntervetnionMessage\"),\r\n                type: \"success\",\r\n                duration: 3000,\r\n                speed: 500,\r\n              });\r\n              this.getInterventions();\r\n            } else {\r\n              this.isShow = false;\r\n              notify({\r\n                title: this.translate(\"notifErrorTitle\"),\r\n                text: this.translate(\"mesProblem\"),\r\n                type: \"error\",\r\n                duration: 3000,\r\n                speed: 500,\r\n              });\r\n            }\r\n          })\r\n          .catch(() => {\r\n            this.isShow = false;\r\n            notify({\r\n              title: this.translate(\"notifErrorTitle\"),\r\n              text: this.translate(\"mesProblem\"),\r\n              type: \"error\",\r\n              duration: 3000,\r\n              speed: 500,\r\n            });\r\n          });\r\n      },\r\n      async detail(id) {\r\n        this.isShow = true;\r\n        this.message.type = \"\";\r\n        this.message.msg = \"\";\r\n        //(this.isShow = true((this.message.type = \"\"))), (this.message.msg = \"\");\r\n        await axios\r\n          .get(\"https://bhsapi.duartecota.com/user/\" + id, {\r\n            headers: {\r\n              Authorization: this.token,\r\n            },\r\n          })\r\n          .then((response) => {\r\n            this.name = response.data.body.name;\r\n            let type = response.data.body.type;\r\n            switch (type) {\r\n              case \"Individual\":\r\n                this.type = this.translate(\"typeOp1\");\r\n                break;\r\n              case \"Company\":\r\n                this.type = this.translate(\"typeOp2\");\r\n                break;\r\n              case \"Companhia\":\r\n                this.type = this.translate(\"typeOp2\");\r\n                break;\r\n              case \"Association\":\r\n                this.type = this.translate(\"typeOp3\");\r\n                break;\r\n              case \"Associação\":\r\n                this.type = this.translate(\"typeOp3\");\r\n                break;\r\n            }\r\n            this.email = response.data.body.email;\r\n            this.bdate = response.data.body.bdate;\r\n            this.mobile = response.data.body.mobile;\r\n            this.nif = response.data.body.nif;\r\n            let notifications = response.data.body.notifications;\r\n            switch (notifications) {\r\n              case true:\r\n                this.notifications = this.translate(\"modalNotifTrue\");\r\n                break;\r\n              case false:\r\n                this.notifications = this.translate(\"modalNotifFalse\");\r\n                break;\r\n            }\r\n            let img = response.data.body.img;\r\n            this.img = response.data.body.img;\r\n            this.isShow = false;\r\n            return true;\r\n          })\r\n          .catch(() => {\r\n            this.message.msg = \"Ocorreu um problema\";\r\n            this.message.type = \"warning\";\r\n            this.isShow = false;\r\n            return false;\r\n          });\r\n      },\r\n      deleteModal(id) {\r\n        localStorage.setItem(\"interventiontodelete\", id);\r\n        this.isModalDeleteVisible = true;\r\n      },\r\n      closeModalDelete() {\r\n        this.isModalDeleteVisible = false;\r\n      },\r\n      async deleteIntervention() {\r\n        await this.delete();\r\n        this.isModalDeleteVisible = false;\r\n      },\r\n      back() {\r\n        this.$router.replace(\"interventions\");\r\n      },\r\n      formNew() {\r\n        this.$router.replace(\"newintervention\");\r\n      },\r\n    },\r\n  };\r\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}