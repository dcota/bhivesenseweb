{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport en from \"../assets/en.js\";\nimport pt from \"../assets/pt.js\";\nimport axios from \"axios\";\nimport { notify } from \"@kyvg/vue3-notification\";\nimport ModalDelete from \"../components/ModalSolveEvent.vue\";\nimport ModalDetails from \"../components/ModalApiaryNotification.vue\";\nimport { mapGetters } from \"vuex\";\nimport { GET_USER_TOKEN_GETTER, GET_USER_LEVEL_GETTER, GET_USER_ID_GETTER } from \"../store/storeconstants\";\n//import { LOADING_SPINNER_SHOW_MUTATION } from \"../store/storeconstants\";\nexport default {\n  mixins: [en, pt],\n  components: {\n    ModalDelete,\n    ModalDetails\n  },\n  data() {\n    const lang = localStorage.getItem(\"lang\") || \"pt\";\n    return {\n      searchID: \"\",\n      data: localStorage.token,\n      isShow: false,\n      lang: lang,\n      isModalDetailsVisible: false,\n      isModalDeleteVisible: false,\n      hasHiveEvents: false,\n      timer: \"\",\n      text: \"\",\n      location: \"\",\n      address: \"\",\n      observations: \"\",\n      regdate: \"\",\n      hiveEvents: []\n    };\n  },\n  computed: {\n    ...mapGetters(\"auth\", {\n      token: GET_USER_TOKEN_GETTER,\n      level: GET_USER_LEVEL_GETTER,\n      _id: GET_USER_ID_GETTER\n    })\n  },\n  mounted() {\n    this.getLog();\n    this.timer = setInterval(this.getEvents, 30000);\n  },\n  beforeUnmount() {\n    clearInterval(this.timer);\n    this.timer = null;\n  },\n  methods: {\n    closeDetailsModalHive() {\n      this.isModalDetailsVisible = false;\n    },\n    closeDeleteModalHive() {\n      this.isModalDeleteVisible = false;\n    },\n    async detailsModalHive(id) {\n      await this.detail(id);\n      this.isModalDetailsVisible = true;\n    },\n    async deleteModalHive(id) {\n      localStorage.setItem(\"idhivetosolve\", id);\n      this.isModalDeleteVisible = true;\n    },\n    translate(prop) {\n      return this[this.lang][prop];\n    },\n    async getLog() {\n      this.hiveEvents = [];\n      this.isShow = true;\n      await axios.get(\"https://bhsapi.duartecota.com/event/log/\" + this._id, {\n        headers: {\n          Authorization: this.token\n        }\n      }).then(response => {\n        this.isShow = false;\n        let events = response.data.body;\n        if (!events.length == 0) {\n          for (let i = 0; i < events.length; i++) {\n            if (events[i].cat == \"hive\") {\n              let date = new Date(events[i].registration_date);\n              let year = date.getFullYear();\n              let month = date.getMonth() + 1 < 10 ? \"0\" + (date.getMonth() + 1) : date.getMonth() + 1;\n              let day = date.getDate() < 10 ? \"0\" + date.getDate() : date.getDate();\n              this.text = \"\";\n              if (events[i].type == \"LIDOPEN\") {\n                this.text = this.translate(\"hiveText\");\n              } else if (events[i].type == \"TEMPHIGH\") {\n                this.text = this.translate(\"tempText\");\n              } else if (events[i].type == \"HUMHIGH\") {\n                this.text = this.translate(\"humText\");\n              } else if (events[i].type == \"HARVEST\") {\n                this.text = this.translate(\"harvestText\");\n              }\n              this.hiveEvents.push({\n                _id: events[i]._id,\n                apiary: events[i].apiary,\n                device: events[i].device,\n                date: year + \"-\" + month + \"-\" + day,\n                text: this.text\n              });\n            }\n          }\n        }\n        this.hiveEvents.length > 0 ? this.hasHiveEvents = true : this.hasHiveEvents = false;\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    async detail(id) {\n      this.isShow = true;\n      await axios.get(\"https://bhsapi.duartecota.com/apiary/one/\" + id, {\n        headers: {\n          Authorization: this.token\n        }\n      }).then(response => {\n        this.location = response.data.body.location;\n        this.address = response.data.body.address;\n        this.observations = response.data.body.observations;\n        this.regdate = response.data.body.registration_date;\n        this.isShow = false;\n        return true;\n      }).catch(() => {\n        this.message.msg = \"Ocorreu um problema\";\n        this.message.type = \"warning\";\n        this.isShow = false;\n        return false;\n      });\n    },\n    async solveHive() {\n      this.isModalDeleteVisible = false;\n      let id = localStorage.getItem(\"idhivetosolve\");\n      await axios.put(\"https://bhsapi.duartecota.com/event/solve/\" + id, {\n        headers: {\n          Authorization: this.token\n        }\n      }).then(response => {\n        if (response.data.http == 200) {\n          this.isShow = false;\n          notify({\n            title: this.translate(\"notifSuccessTitle\"),\n            text: this.translate(\"notifHiveEventSolved\"),\n            type: \"success\",\n            duration: 3000,\n            speed: 500\n          });\n        } else {\n          this.isShow = false;\n          notify({\n            title: this.translate(\"notifErrorTitle\"),\n            text: this.translate(\"mesProblem\"),\n            type: \"error\",\n            duration: 3000,\n            speed: 500\n          });\n        }\n      }).catch(() => {\n        this.isShow = false;\n        notify({\n          title: this.translate(\"notifErrorTitle\"),\n          text: this.translate(\"mesProblem\"),\n          type: \"error\",\n          duration: 3000,\n          speed: 500\n        });\n      });\n      this.getEvents();\n    },\n    async assign(id) {\n      alert(id);\n      console.log(localStorage.getItem(\"apiaryIDtoget\"));\n      await axios.patch(\"https://bhsapi.duartecota.com/device/\" + id + \"/\" + localStorage.getItem(\"apiaryIDtoget\"), {\n        headers: {\n          Authorization: this.token\n        }\n      }).then(response => {\n        if (response.data.http == 200) {\n          this.isShow = false;\n          notify({\n            title: this.translate(\"notifSuccessTitle\"),\n            text: this.translate(\"assignMessage\"),\n            type: \"success\",\n            duration: 3000,\n            speed: 500\n          });\n          this.getDevices();\n        } else {\n          this.isShow = false;\n          notify({\n            title: this.translate(\"notifErrorTitle\"),\n            text: this.translate(\"mesProblem\"),\n            type: \"error\",\n            duration: 3000,\n            speed: 500\n          });\n        }\n      }).catch(() => {\n        this.isShow = false;\n        notify({\n          title: this.translate(\"notifErrorTitle\"),\n          text: this.translate(\"mesProblem\"),\n          type: \"error\",\n          duration: 3000,\n          speed: 500\n        });\n      });\n    },\n    loadDetails(apiary, hive) {\n      localStorage.setItem(\"lastroute\", this.$route.path);\n      localStorage.setItem(\"hiveIDtoget\", hive);\n      localStorage.setItem(\"apiaryIDtoget\", apiary);\n      this.$router.push(\"/hivedetails\");\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["en","pt","axios","notify","ModalDelete","ModalDetails","mapGetters","GET_USER_TOKEN_GETTER","GET_USER_LEVEL_GETTER","GET_USER_ID_GETTER","mixins","components","data","lang","localStorage","getItem","searchID","token","isShow","isModalDetailsVisible","isModalDeleteVisible","hasHiveEvents","timer","text","location","address","observations","regdate","hiveEvents","computed","level","_id","mounted","getLog","setInterval","getEvents","beforeUnmount","clearInterval","methods","closeDetailsModalHive","closeDeleteModalHive","detailsModalHive","id","detail","deleteModalHive","setItem","translate","prop","get","headers","Authorization","then","response","events","body","length","i","cat","date","Date","registration_date","year","getFullYear","month","getMonth","day","getDate","type","push","apiary","device","catch","error","console","log","message","msg","solveHive","put","http","title","duration","speed","assign","alert","patch","getDevices","loadDetails","hive","$route","path","$router"],"sourceRoot":"","sources":["C:\\Users\\duart\\OneDrive - PGA\\Ambiente de Trabalho\\bhivesenseweb\\bhivesenseweb\\src\\views\\Logdetails.vue"],"sourcesContent":["/*\r\nMEIW - Programação Web Avançada - projeto final\r\nAuhtor: Duarte Cota\r\nDescription: implementation of the view Gestão de Alunos (Admin)\r\n*/\r\n\r\n<template id=\"example-modal\">\r\n  <section class=\"container my-body\">\r\n    <h1 class=\"my-text-color\">{{ translate(\"dashLogTitle\") }}</h1>\r\n    <section class=\"line-1\"></section>\r\n    <section class=\"row mt-3\" v-if=\"hasHiveEvents\">\r\n      <h4 class=\"my-text-color\">{{ translate(\"dashLogDescr\") }}</h4>\r\n    </section>\r\n    <section class=\"card mt-5 text-center p-4\" v-if=\"!hasHiveEvents && !isShow\">\r\n      <h3>{{ translate(\"cardNoEvents\") }}</h3>\r\n    </section>\r\n    <input\r\n      v-if=\"hasHiveEvents\"\r\n      type=\"search\"\r\n      v-model=\"searchID\"\r\n      class=\"form-control mt-4\"\r\n      v-bind:placeholder=\"translate('searchPholderID')\"\r\n    />\r\n    <section class=\"card mt-2\" v-if=\"hasHiveEvents\">\r\n      <section\r\n        class=\"card-body\"\r\n        style=\"\r\n          border-radius: 3px;\r\n          box-shadow: rgba(0, 0, 0, 0.25) 0px 14px 28px,\r\n            rgba(0, 0, 0, 0.22) 0px 10px 10px;\r\n        \"\r\n      >\r\n        <table class=\"table mt-2 table-striped\">\r\n          <tbody>\r\n            <tr>\r\n              <th>{{ translate(\"thdEvent\") }}</th>\r\n              <th class=\"text-center\">{{ translate(\"thdHive\") }}</th>\r\n              <th class=\"text-center\">{{ translate(\"tdDate\") }}</th>\r\n              <th class=\"text-center\">{{ translate(\"thdDevicesApiary\") }}</th>\r\n            </tr>\r\n            <tr v-for=\"event in hiveEvents\" :key=\"event._id\">\r\n              <td>{{ event.text }}</td>\r\n              <td class=\"text-center\">\r\n                <a\r\n                  @click=\"loadDetails(event.apiary, event.device)\"\r\n                  style=\"\r\n                    text-decoration: underline;\r\n                    color: brown;\r\n                    cursor: pointer;\r\n                  \"\r\n                  >{{ event.device }}</a\r\n                >\r\n              </td>\r\n              <td class=\"text-center\">{{ event.date }}</td>\r\n              <td class=\"text-center\">\r\n                <button\r\n                  data-bs-toggle=\"tooltip\"\r\n                  v-bind:title=\"translate('lblCardApiary')\"\r\n                  data-bs-placement=\"bottom\"\r\n                  data-bs-custom-class=\"custom-tooltip\"\r\n                  @click=\"detailsModalHive(event.apiary)\"\r\n                  type=\"button\"\r\n                  class=\"btn btn-info btn-sm me-2 ac-btn\"\r\n                  style=\"width: 50px\"\r\n                >\r\n                  <i class=\"fas fa-search\" aria-hidden=\"true\"></i>\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </section>\r\n    </section>\r\n    <!--table for intervention notifictions-->\r\n\r\n    <ModalDelete\r\n      v-show=\"isModalDeleteVisible\"\r\n      @close=\"closeDeleteModalHive\"\r\n      @solve=\"solveHive\"\r\n    />\r\n    <ModalDetails\r\n      v-show=\"isModalDetailsVisible\"\r\n      @close=\"closeDetailsModalHive\"\r\n      :location=\"location\"\r\n      :address=\"address\"\r\n      :observations=\"observations\"\r\n      :regdate=\"regdate\"\r\n    />\r\n    <section class=\"text-center\">\r\n      <section v-if=\"isShow\" class=\"text-center\">\r\n        <section class=\"spinner-border mt-4\" role=\"status\">\r\n          <span class=\"visually-hidden\">Loading...</span>\r\n        </section>\r\n        <section class=\"mb-2\">{{ translate(\"spinnerTxt\") }}</section>\r\n      </section>\r\n    </section>\r\n    <section class=\"spacer\"></section>\r\n  </section>\r\n</template>\r\n\r\n<style scoped>\r\n.ac-btn {\r\n  width: 120px;\r\n  color: white;\r\n  font-weight: bold;\r\n}\r\n.spacer {\r\n  height: 200px;\r\n}\r\n</style>\r\n\r\n<script>\r\n  import en from \"../assets/en.js\";\r\n  import pt from \"../assets/pt.js\";\r\n  import axios from \"axios\";\r\n  import { notify } from \"@kyvg/vue3-notification\";\r\n  import ModalDelete from \"../components/ModalSolveEvent.vue\";\r\n  import ModalDetails from \"../components/ModalApiaryNotification.vue\";\r\n  import { mapGetters } from \"vuex\";\r\n  import {\r\n    GET_USER_TOKEN_GETTER,\r\n    GET_USER_LEVEL_GETTER,\r\n    GET_USER_ID_GETTER,\r\n  } from \"../store/storeconstants\";\r\n  //import { LOADING_SPINNER_SHOW_MUTATION } from \"../store/storeconstants\";\r\n  export default {\r\n    mixins: [en, pt],\r\n    components: {\r\n      ModalDelete,\r\n      ModalDetails,\r\n    },\r\n    data() {\r\n      const lang = localStorage.getItem(\"lang\") || \"pt\";\r\n      return {\r\n        searchID: \"\",\r\n        data: localStorage.token,\r\n        isShow: false,\r\n        lang: lang,\r\n        isModalDetailsVisible: false,\r\n        isModalDeleteVisible: false,\r\n        hasHiveEvents: false,\r\n        timer: \"\",\r\n        text: \"\",\r\n        location: \"\",\r\n        address: \"\",\r\n        observations: \"\",\r\n        regdate: \"\",\r\n        hiveEvents: [],\r\n      };\r\n    },\r\n    computed: {\r\n      ...mapGetters(\"auth\", {\r\n        token: GET_USER_TOKEN_GETTER,\r\n        level: GET_USER_LEVEL_GETTER,\r\n        _id: GET_USER_ID_GETTER,\r\n      }),\r\n    },\r\n    mounted() {\r\n      this.getLog();\r\n      this.timer = setInterval(this.getEvents, 30000);\r\n    },\r\n    beforeUnmount() {\r\n      clearInterval(this.timer);\r\n      this.timer = null;\r\n    },\r\n    methods: {\r\n      closeDetailsModalHive() {\r\n        this.isModalDetailsVisible = false;\r\n      },\r\n      closeDeleteModalHive() {\r\n        this.isModalDeleteVisible = false;\r\n      },\r\n      async detailsModalHive(id) {\r\n        await this.detail(id);\r\n        this.isModalDetailsVisible = true;\r\n      },\r\n      async deleteModalHive(id) {\r\n        localStorage.setItem(\"idhivetosolve\", id);\r\n        this.isModalDeleteVisible = true;\r\n      },\r\n      translate(prop) {\r\n        return this[this.lang][prop];\r\n      },\r\n      async getLog() {\r\n        this.hiveEvents = [];\r\n        this.isShow = true;\r\n        await axios\r\n          .get(\"https://bhsapi.duartecota.com/event/log/\" + this._id, {\r\n            headers: {\r\n              Authorization: this.token,\r\n            },\r\n          })\r\n          .then((response) => {\r\n            this.isShow = false;\r\n            let events = response.data.body;\r\n            if (!events.length == 0) {\r\n              for (let i = 0; i < events.length; i++) {\r\n                if (events[i].cat == \"hive\") {\r\n                  let date = new Date(events[i].registration_date);\r\n                  let year = date.getFullYear();\r\n                  let month =\r\n                    date.getMonth() + 1 < 10\r\n                      ? \"0\" + (date.getMonth() + 1)\r\n                      : date.getMonth() + 1;\r\n                  let day =\r\n                    date.getDate() < 10 ? \"0\" + date.getDate() : date.getDate();\r\n                  this.text = \"\";\r\n                  if (events[i].type == \"LIDOPEN\") {\r\n                    this.text = this.translate(\"hiveText\");\r\n                  } else if (events[i].type == \"TEMPHIGH\") {\r\n                    this.text = this.translate(\"tempText\");\r\n                  } else if (events[i].type == \"HUMHIGH\") {\r\n                    this.text = this.translate(\"humText\");\r\n                  } else if (events[i].type == \"HARVEST\") {\r\n                    this.text = this.translate(\"harvestText\");\r\n                  }\r\n                  this.hiveEvents.push({\r\n                    _id: events[i]._id,\r\n                    apiary: events[i].apiary,\r\n                    device: events[i].device,\r\n                    date: year + \"-\" + month + \"-\" + day,\r\n                    text: this.text,\r\n                  });\r\n                }\r\n              }\r\n            }\r\n            this.hiveEvents.length > 0\r\n              ? (this.hasHiveEvents = true)\r\n              : (this.hasHiveEvents = false);\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n      },\r\n      async detail(id) {\r\n        this.isShow = true;\r\n        await axios\r\n          .get(\"https://bhsapi.duartecota.com/apiary/one/\" + id, {\r\n            headers: {\r\n              Authorization: this.token,\r\n            },\r\n          })\r\n          .then((response) => {\r\n            this.location = response.data.body.location;\r\n            this.address = response.data.body.address;\r\n            this.observations = response.data.body.observations;\r\n            this.regdate = response.data.body.registration_date;\r\n            this.isShow = false;\r\n            return true;\r\n          })\r\n          .catch(() => {\r\n            this.message.msg = \"Ocorreu um problema\";\r\n            this.message.type = \"warning\";\r\n            this.isShow = false;\r\n            return false;\r\n          });\r\n      },\r\n      async solveHive() {\r\n        this.isModalDeleteVisible = false;\r\n        let id = localStorage.getItem(\"idhivetosolve\");\r\n        await axios\r\n          .put(\"https://bhsapi.duartecota.com/event/solve/\" + id, {\r\n            headers: {\r\n              Authorization: this.token,\r\n            },\r\n          })\r\n          .then((response) => {\r\n            if (response.data.http == 200) {\r\n              this.isShow = false;\r\n              notify({\r\n                title: this.translate(\"notifSuccessTitle\"),\r\n                text: this.translate(\"notifHiveEventSolved\"),\r\n                type: \"success\",\r\n                duration: 3000,\r\n                speed: 500,\r\n              });\r\n            } else {\r\n              this.isShow = false;\r\n              notify({\r\n                title: this.translate(\"notifErrorTitle\"),\r\n                text: this.translate(\"mesProblem\"),\r\n                type: \"error\",\r\n                duration: 3000,\r\n                speed: 500,\r\n              });\r\n            }\r\n          })\r\n          .catch(() => {\r\n            this.isShow = false;\r\n            notify({\r\n              title: this.translate(\"notifErrorTitle\"),\r\n              text: this.translate(\"mesProblem\"),\r\n              type: \"error\",\r\n              duration: 3000,\r\n              speed: 500,\r\n            });\r\n          });\r\n        this.getEvents();\r\n      },\r\n      async assign(id) {\r\n        alert(id);\r\n        console.log(localStorage.getItem(\"apiaryIDtoget\"));\r\n        await axios\r\n          .patch(\r\n            \"https://bhsapi.duartecota.com/device/\" +\r\n              id +\r\n              \"/\" +\r\n              localStorage.getItem(\"apiaryIDtoget\"),\r\n            {\r\n              headers: {\r\n                Authorization: this.token,\r\n              },\r\n            }\r\n          )\r\n          .then((response) => {\r\n            if (response.data.http == 200) {\r\n              this.isShow = false;\r\n              notify({\r\n                title: this.translate(\"notifSuccessTitle\"),\r\n                text: this.translate(\"assignMessage\"),\r\n                type: \"success\",\r\n                duration: 3000,\r\n                speed: 500,\r\n              });\r\n              this.getDevices();\r\n            } else {\r\n              this.isShow = false;\r\n              notify({\r\n                title: this.translate(\"notifErrorTitle\"),\r\n                text: this.translate(\"mesProblem\"),\r\n                type: \"error\",\r\n                duration: 3000,\r\n                speed: 500,\r\n              });\r\n            }\r\n          })\r\n          .catch(() => {\r\n            this.isShow = false;\r\n            notify({\r\n              title: this.translate(\"notifErrorTitle\"),\r\n              text: this.translate(\"mesProblem\"),\r\n              type: \"error\",\r\n              duration: 3000,\r\n              speed: 500,\r\n            });\r\n          });\r\n      },\r\n      loadDetails(apiary, hive) {\r\n        localStorage.setItem(\"lastroute\", this.$route.path);\r\n        localStorage.setItem(\"hiveIDtoget\", hive);\r\n        localStorage.setItem(\"apiaryIDtoget\", apiary);\r\n        this.$router.push(\"/hivedetails\");\r\n      },\r\n    },\r\n  };\r\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}