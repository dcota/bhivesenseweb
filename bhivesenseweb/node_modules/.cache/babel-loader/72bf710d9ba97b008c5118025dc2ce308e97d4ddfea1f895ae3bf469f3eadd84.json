{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport en from \"../assets/en.js\";\nimport pt from \"../assets/pt.js\";\nimport axios from \"axios\";\nimport { notify } from \"@kyvg/vue3-notification\";\nimport ModalDelete from \"../components/ModalUnregisterDevice.vue\";\nimport { mapGetters } from \"vuex\";\nimport { GET_USER_TOKEN_GETTER, GET_USER_LEVEL_GETTER, GET_USER_ID_GETTER } from \"../store/storeconstants\";\nexport default {\n  mixins: [en, pt],\n  components: {\n    ModalDelete\n  },\n  data() {\n    const lang = localStorage.getItem(\"lang\") || \"pt\";\n    return {\n      searchID: \"\",\n      data: localStorage.token,\n      devices: [],\n      message: {\n        type: \"\",\n        msg: \"\"\n      },\n      id: \"\",\n      state: \"\",\n      name: \"\",\n      showsection: false,\n      isShow: false,\n      lang: lang,\n      isModalDeleteVisible: false,\n      hivetounregister: \"\",\n      hasHives: false,\n      hasUnassigned: false\n    };\n  },\n  computed: {\n    ...mapGetters(\"auth\", {\n      token: GET_USER_TOKEN_GETTER,\n      level: GET_USER_LEVEL_GETTER,\n      _id: GET_USER_ID_GETTER\n    }),\n    filteredPersons: function () {\n      return this.devices.filter(this.filterByID).sort(this.orderBy);\n    }\n  },\n  mounted() {\n    this.getDevices();\n  },\n  methods: {\n    filterByID: function (device) {\n      if (this.searchID.length === 0) {\n        return true;\n      }\n      return device.id.toLowerCase().indexOf(this.searchID.toLowerCase()) > -1;\n    },\n    orderBy: function (userA, userB) {\n      let condition = userA[this.sortKey] > userB[this.sortKey];\n      if (this.reverse) {\n        return !condition;\n      } else {\n        return condition;\n      }\n    },\n    translate(prop) {\n      return this[this.lang][prop];\n    },\n    async getDevices() {\n      this.devices = [];\n      this.isShow = true;\n      await axios.get(\"https://bhsapi.duartecota.com/device/all/\" + this._id, {\n        headers: {\n          Authorization: this.token\n        }\n      }).then(response => {\n        this.isShow = false;\n        let devices = response.data.body;\n        if (devices.length == 0) {\n          this.hasHives = false;\n          notify({\n            title: this.translate(\"notifWarningTitle\"),\n            text: this.translate(\"noHives\"),\n            type: \"warn\",\n            duration: 3000,\n            speed: 500\n          });\n        } else {\n          this.hasHives = true;\n          for (let i = 0; i < devices.length; i++) {\n            if (devices[i].apiary == null) {\n              this.hasUnassigned = true;\n              this.devices.push({\n                id: devices[i]._id,\n                assigned: this.translate(\"notAssignedText\"),\n                hasapiary: false\n              });\n            } else {\n              this.devices.push({\n                id: devices[i]._id,\n                assigned: this.translate(\"assignedText\"),\n                hasapiary: true\n              });\n            }\n          }\n        }\n        if (this.hasUnassigned == false) {\n          notify({\n            title: this.translate(\"notifWarningTitle\"),\n            text: this.translate(\"noHivesToAssign\"),\n            type: \"warn\",\n            duration: 3000,\n            speed: 500\n          });\n        }\n      }).catch(() => {});\n    },\n    async unregister(id) {\n      await axios.put(\"https://bhsapi.duartecota.com/device/unregister/\" + id, {\n        headers: {\n          Authorization: this.token\n        }\n      }).then(response => {\n        if (response.data.http == 200) {\n          this.isShow = false;\n          notify({\n            title: this.translate(\"notifSuccessTitle\"),\n            text: this.translate(\"unregisterMessage\"),\n            type: \"success\",\n            duration: 3000,\n            speed: 500\n          });\n          this.getDevices();\n        } else {\n          this.isShow = false;\n          notify({\n            title: this.translate(\"notifErrorTitle\"),\n            text: this.translate(\"mesProblem\"),\n            type: \"error\",\n            duration: 3000,\n            speed: 500\n          });\n        }\n      }).catch(() => {\n        this.isShow = false;\n        notify({\n          title: this.translate(\"notifErrorTitle\"),\n          text: this.translate(\"mesProblem\"),\n          type: \"error\",\n          duration: 3000,\n          speed: 500\n        });\n      });\n    },\n    async assign(id) {\n      await axios.put(\"https://bhsapi.duartecota.com/device/assign/\" + id + \"/\" + localStorage.getItem(\"apiaryIDtoget\"), {\n        headers: {\n          Authorization: this.token\n        }\n      }).then(response => {\n        if (response.data.http == 200) {\n          this.isShow = false;\n          notify({\n            title: this.translate(\"notifSuccessTitle\"),\n            text: this.translate(\"assignMessage\"),\n            type: \"success\",\n            duration: 3000,\n            speed: 500\n          });\n          this.getDevices();\n        } else {\n          this.isShow = false;\n          notify({\n            title: this.translate(\"notifErrorTitle\"),\n            text: this.translate(\"mesProblem\"),\n            type: \"error\",\n            duration: 3000,\n            speed: 500\n          });\n        }\n      }).catch(() => {\n        this.isShow = false;\n        notify({\n          title: this.translate(\"notifErrorTitle\"),\n          text: this.translate(\"mesProblem\"),\n          type: \"error\",\n          duration: 3000,\n          speed: 500\n        });\n      });\n    },\n    async deleteModal(id) {\n      this.hivetounregister = id;\n      this.isModalDeleteVisible = true;\n    },\n    closeModalDelete() {\n      this.isModalDeleteVisible = false;\n    },\n    async toUnregister() {\n      await this.unregister(this.hivetounregister);\n      alert(this.hivetounregister);\n      this.isModalDeleteVisible = false;\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["en","pt","axios","notify","ModalDelete","mapGetters","GET_USER_TOKEN_GETTER","GET_USER_LEVEL_GETTER","GET_USER_ID_GETTER","mixins","components","data","lang","localStorage","getItem","searchID","token","devices","message","type","msg","id","state","name","showsection","isShow","isModalDeleteVisible","hivetounregister","hasHives","hasUnassigned","computed","level","_id","filteredPersons","filter","filterByID","sort","orderBy","mounted","getDevices","methods","device","length","toLowerCase","indexOf","userA","userB","condition","sortKey","reverse","translate","prop","get","headers","Authorization","then","response","body","title","text","duration","speed","i","apiary","push","assigned","hasapiary","catch","unregister","put","http","assign","deleteModal","closeModalDelete","toUnregister","alert"],"sourceRoot":"","sources":["C:\\Users\\duart\\OneDrive - PGA\\Ambiente de Trabalho\\bhivesenseweb\\bhivesenseweb\\src\\views\\Assignhive.vue"],"sourcesContent":["<template id=\"example-modal\">\n  <section class=\"container my-body\">\n    <h2 class=\"my-text-color\">{{ translate(\"assignHiveTitle\") }}</h2>\n    <section class=\"line-1\"></section>\n    <section>\n      <button\n        @click=\"$router.push('/hives')\"\n        type=\"button\"\n        class=\"btn mt-4 my-button\"\n      >\n        <section v-if=\"!isShow\">\n          <i class=\"fas fa-arrow-left me-1 act-btn\" aria-hidden=\"true\"></i>\n          {{ translate(\"btnBack\") }}\n        </section>\n        <section\n          v-else\n          class=\"spinner-border spinner-border-sm\"\n          role=\"status\"\n        ></section>\n      </button>\n    </section>\n    <section class=\"row mt-3\" v-if=\"hasHives\">\n      <h4 class=\"my-text-color\">{{ translate(\"manageHivesLabel\") }}</h4>\n    </section>\n    <input\n      v-if=\"hasHives\"\n      type=\"search\"\n      v-model=\"searchID\"\n      class=\"form-control mt-4\"\n      v-bind:placeholder=\"translate('searchPholderID')\"\n    />\n\n    <section class=\"card mt-4\" v-if=\"hasHives\">\n      <section\n        class=\"card-body\"\n        style=\"\n          border-radius: 3px;\n          box-shadow: rgba(0, 0, 0, 0.25) 0px 14px 28px,\n            rgba(0, 0, 0, 0.22) 0px 10px 10px;\n        \"\n      >\n        <table class=\"table mt-2\">\n          <tbody>\n            <tr>\n              <th>{{ translate(\"thdDevicesID\") }}</th>\n              <th class=\"text-center\">{{ translate(\"thdDevicesApiary\") }}</th>\n              <th class=\"text-center\">{{ translate(\"thdUsersActions\") }}</th>\n            </tr>\n            <tr v-for=\"device in filteredPersons\" :key=\"device.id\">\n              <td>{{ device.id }}</td>\n              <td>{{ device.assigned }}</td>\n              <td class=\"text-center\">\n                <button\n                  data-bs-toggle=\"tooltip\"\n                  v-bind:title=\"translate('lblAssign')\"\n                  data-bs-placement=\"bottom\"\n                  data-bs-custom-class=\"custom-tooltip\"\n                  @click=\"assign(device.id)\"\n                  type=\"button\"\n                  class=\"btn btn-success btn-sm me-2 ac-btn\"\n                  :disabled=\"device.hasapiary\"\n                  style=\"width: 50px\"\n                >\n                  <i class=\"fa-solid fa-right-to-bracket\"></i>\n                </button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </section>\n    </section>\n    <ModalDelete\n      v-show=\"isModalDeleteVisible\"\n      @close=\"closeModalDelete\"\n      @unregister=\"toUnregister\"\n    />\n    <section class=\"text-center\">\n      <section v-if=\"isShow\" class=\"text-center\">\n        <section class=\"spinner-border mt-4\" role=\"status\">\n          <span class=\"visually-hidden\">Loading...</span>\n        </section>\n        <section class=\"mb-2\">{{ translate(\"spinnerTxt\") }}</section>\n      </section>\n    </section>\n    <section class=\"spacer\"></section>\n  </section>\n</template>\n\n<style scoped>\n.ac-btn {\n  width: 120px;\n  color: white;\n  font-weight: bold;\n}\n.spacer {\n  height: 200px;\n}\n</style>\n\n<script>\n  import en from \"../assets/en.js\";\n  import pt from \"../assets/pt.js\";\n  import axios from \"axios\";\n  import { notify } from \"@kyvg/vue3-notification\";\n  import ModalDelete from \"../components/ModalUnregisterDevice.vue\";\n  import { mapGetters } from \"vuex\";\n  import {\n    GET_USER_TOKEN_GETTER,\n    GET_USER_LEVEL_GETTER,\n    GET_USER_ID_GETTER,\n  } from \"../store/storeconstants\";\n  export default {\n    mixins: [en, pt],\n    components: {\n      ModalDelete,\n    },\n    data() {\n      const lang = localStorage.getItem(\"lang\") || \"pt\";\n      return {\n        searchID: \"\",\n        data: localStorage.token,\n        devices: [],\n        message: {\n          type: \"\",\n          msg: \"\",\n        },\n        id: \"\",\n        state: \"\",\n        name: \"\",\n        showsection: false,\n        isShow: false,\n        lang: lang,\n        isModalDeleteVisible: false,\n        hivetounregister: \"\",\n        hasHives: false,\n        hasUnassigned: false,\n      };\n    },\n    computed: {\n      ...mapGetters(\"auth\", {\n        token: GET_USER_TOKEN_GETTER,\n        level: GET_USER_LEVEL_GETTER,\n        _id: GET_USER_ID_GETTER,\n      }),\n      filteredPersons: function () {\n        return this.devices.filter(this.filterByID).sort(this.orderBy);\n      },\n    },\n    mounted() {\n      this.getDevices();\n    },\n    methods: {\n      filterByID: function (device) {\n        if (this.searchID.length === 0) {\n          return true;\n        }\n\n        return device.id.toLowerCase().indexOf(this.searchID.toLowerCase()) > -1;\n      },\n      orderBy: function (userA, userB) {\n        let condition = userA[this.sortKey] > userB[this.sortKey];\n        if (this.reverse) {\n          return !condition;\n        } else {\n          return condition;\n        }\n      },\n      translate(prop) {\n        return this[this.lang][prop];\n      },\n      async getDevices() {\n        this.devices = [];\n        this.isShow = true;\n        await axios\n          .get(\"https://bhsapi.duartecota.com/device/all/\" + this._id, {\n            headers: {\n              Authorization: this.token,\n            },\n          })\n          .then((response) => {\n            this.isShow = false;\n            let devices = response.data.body;\n            if (devices.length == 0) {\n              this.hasHives = false;\n              notify({\n                title: this.translate(\"notifWarningTitle\"),\n                text: this.translate(\"noHives\"),\n                type: \"warn\",\n                duration: 3000,\n                speed: 500,\n              });\n            } else {\n              this.hasHives = true;\n              for (let i = 0; i < devices.length; i++) {\n                if (devices[i].apiary == null) {\n                  this.hasUnassigned = true;\n                  this.devices.push({\n                    id: devices[i]._id,\n                    assigned: this.translate(\"notAssignedText\"),\n                    hasapiary: false,\n                  });\n                } else {\n                  this.devices.push({\n                    id: devices[i]._id,\n                    assigned: this.translate(\"assignedText\"),\n                    hasapiary: true,\n                  });\n                }\n              }\n            }\n            if (this.hasUnassigned == false) {\n              notify({\n                title: this.translate(\"notifWarningTitle\"),\n                text: this.translate(\"noHivesToAssign\"),\n                type: \"warn\",\n                duration: 3000,\n                speed: 500,\n              });\n            }\n          })\n          .catch(() => {});\n      },\n      async unregister(id) {\n        await axios\n          .put(\"https://bhsapi.duartecota.com/device/unregister/\" + id, {\n            headers: {\n              Authorization: this.token,\n            },\n          })\n          .then((response) => {\n            if (response.data.http == 200) {\n              this.isShow = false;\n              notify({\n                title: this.translate(\"notifSuccessTitle\"),\n                text: this.translate(\"unregisterMessage\"),\n                type: \"success\",\n                duration: 3000,\n                speed: 500,\n              });\n              this.getDevices();\n            } else {\n              this.isShow = false;\n              notify({\n                title: this.translate(\"notifErrorTitle\"),\n                text: this.translate(\"mesProblem\"),\n                type: \"error\",\n                duration: 3000,\n                speed: 500,\n              });\n            }\n          })\n          .catch(() => {\n            this.isShow = false;\n            notify({\n              title: this.translate(\"notifErrorTitle\"),\n              text: this.translate(\"mesProblem\"),\n              type: \"error\",\n              duration: 3000,\n              speed: 500,\n            });\n          });\n      },\n      async assign(id) {\n        await axios\n          .put(\n            \"https://bhsapi.duartecota.com/device/assign/\" +\n              id +\n              \"/\" +\n              localStorage.getItem(\"apiaryIDtoget\"),\n            {\n              headers: {\n                Authorization: this.token,\n              },\n            }\n          )\n          .then((response) => {\n            if (response.data.http == 200) {\n              this.isShow = false;\n              notify({\n                title: this.translate(\"notifSuccessTitle\"),\n                text: this.translate(\"assignMessage\"),\n                type: \"success\",\n                duration: 3000,\n                speed: 500,\n              });\n              this.getDevices();\n            } else {\n              this.isShow = false;\n              notify({\n                title: this.translate(\"notifErrorTitle\"),\n                text: this.translate(\"mesProblem\"),\n                type: \"error\",\n                duration: 3000,\n                speed: 500,\n              });\n            }\n          })\n          .catch(() => {\n            this.isShow = false;\n            notify({\n              title: this.translate(\"notifErrorTitle\"),\n              text: this.translate(\"mesProblem\"),\n              type: \"error\",\n              duration: 3000,\n              speed: 500,\n            });\n          });\n      },\n      async deleteModal(id) {\n        this.hivetounregister = id;\n        this.isModalDeleteVisible = true;\n      },\n      closeModalDelete() {\n        this.isModalDeleteVisible = false;\n      },\n      async toUnregister() {\n        await this.unregister(this.hivetounregister);\n        alert(this.hivetounregister);\n        this.isModalDeleteVisible = false;\n      },\n    },\n  };\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}