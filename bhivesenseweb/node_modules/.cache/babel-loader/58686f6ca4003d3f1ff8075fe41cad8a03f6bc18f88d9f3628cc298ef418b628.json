{"ast":null,"code":"import en from \"../assets/en.js\";\nimport pt from \"../assets/pt.js\";\nimport axios from \"axios\";\nimport { mapGetters, mapMutations, mapActions } from \"vuex\";\nimport { GET_USER_TOKEN_GETTER, GET_USER_LEVEL_GETTER, GET_USER_ID_GETTER, AUTO_IMAGE_ACTION, LOGOUT_ACTION } from \"../store/storeconstants\";\nexport default {\n  name: \"Apiaries\",\n  mixins: [en, pt],\n  data: function () {\n    const lang = localStorage.getItem(\"lang\") || \"pt\";\n    return {\n      img: require(\"../assets/IMG1220.png\"),\n      lang: lang,\n      message: {\n        type: \"\",\n        msg: \"\"\n      },\n      isShow: true,\n      //isModalVisible: false,\n      showsection: false\n    };\n  },\n  computed: {\n    ...mapGetters(\"auth\", {\n      token: GET_USER_TOKEN_GETTER,\n      level: GET_USER_LEVEL_GETTER,\n      _id: GET_USER_ID_GETTER\n    })\n  },\n  mounted() {\n    this.getApiaries();\n  },\n  methods: {\n    async getAccountInfo() {\n      this.message.type = \"\";\n      this.message.msg = \"\";\n      this.isShow = false;\n      await axios.get(\"https://bhsapi.duartecota.com/apiary\" + this._id, {\n        headers: {\n          Authorization: this.token\n        }\n      }).then(response => {\n        console.log(response.data.body),\n        /*(this.form.firstname = response.data.body.firstname),\r\n            (this.form.lastname = response.data.body.lastname),\r\n            (this.form.name = response.data.body.name),\r\n            (this.form.type = response.data.body.type),\r\n            (this.form.nif = response.data.body.nif),\r\n            (this.form.bdate = response.data.body.bdate),\r\n            (this.form.email = response.data.body.email),\r\n            (this.form.mobile = response.data.body.mobile),\r\n            (this.form.notifications = response.data.body.notifications);*/\n\n        this.isShow = false;\n      }).catch(() => {\n        this.isShow = false;\n        this.showsection = true;\n        this.message.type = \"danger\";\n        this.message.msg = this.translate(\"mesProblem\");\n        this.isShow = true;\n      });\n    },\n    translate(prop) {\n      return this[this.lang][prop];\n    }\n  }\n};","map":{"version":3,"mappings":"AA6CE,OAAOA,EAAC,MAAO,iBAAiB;AAChC,OAAOC,EAAC,MAAO,iBAAiB;AAChC,OAAOC,KAAI,MAAO,OAAO;AACzB,SAASC,UAAU,EAAEC,YAAY,EAAEC,UAAS,QAAS,MAAM;AAC3D,SACEC,qBAAqB,EACrBC,qBAAqB,EACrBC,kBAAkB,EAClBC,iBAAiB,EACjBC,aAAa,QACR,yBAAyB;AAChC,eAAe;EACbC,IAAI,EAAE,UAAU;EAChBC,MAAM,EAAE,CAACZ,EAAE,EAAEC,EAAE,CAAC;EAChBY,IAAI,EAAE,YAAY;IAChB,MAAMC,IAAG,GAAIC,YAAY,CAACC,OAAO,CAAC,MAAM,KAAK,IAAI;IACjD,OAAO;MACLC,GAAG,EAAEC,OAAO,CAAC,uBAAuB,CAAC;MACrCJ,IAAI,EAAEA,IAAI;MACVK,OAAO,EAAE;QACPC,IAAI,EAAE,EAAE;QACRC,GAAG,EAAE;MACP,CAAC;MACDC,MAAM,EAAE,IAAI;MACZ;MACAC,WAAW,EAAE;IACf,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACR,GAAGrB,UAAU,CAAC,MAAM,EAAE;MACpBsB,KAAK,EAAEnB,qBAAqB;MAC5BoB,KAAK,EAAEnB,qBAAqB;MAC5BoB,GAAG,EAAEnB;IACP,CAAC;EACH,CAAC;EACDoB,OAAO,GAAG;IACR,IAAI,CAACC,WAAW,EAAE;EACpB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,cAAc,GAAG;MACrB,IAAI,CAACZ,OAAO,CAACC,IAAG,GAAI,EAAE;MACtB,IAAI,CAACD,OAAO,CAACE,GAAE,GAAI,EAAE;MACrB,IAAI,CAACC,MAAK,GAAI,KAAK;MACnB,MAAMpB,KAAI,CACP8B,GAAG,CAAC,sCAAqC,GAAI,IAAI,CAACL,GAAG,EAAE;QACtDM,OAAO,EAAE;UACPC,aAAa,EAAE,IAAI,CAACT;QACtB;MACF,CAAC,EACAU,IAAI,CAAEC,QAAQ,IAAK;QAClBC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACvB,IAAI,CAAC0B,IAAI,CAAC;QAC7B;;;;;;;;;;QAUC,IAAI,CAACjB,MAAK,GAAI,KAAM;MACzB,CAAC,EACAkB,KAAK,CAAC,MAAM;QACX,IAAI,CAAClB,MAAK,GAAI,KAAK;QACnB,IAAI,CAACC,WAAU,GAAI,IAAI;QACvB,IAAI,CAACJ,OAAO,CAACC,IAAG,GAAI,QAAQ;QAC5B,IAAI,CAACD,OAAO,CAACE,GAAE,GAAI,IAAI,CAACoB,SAAS,CAAC,YAAY,CAAC;QAC/C,IAAI,CAACnB,MAAK,GAAI,IAAI;MACpB,CAAC,CAAC;IACN,CAAC;IACDmB,SAAS,CAACC,IAAI,EAAE;MACd,OAAO,IAAI,CAAC,IAAI,CAAC5B,IAAI,CAAC,CAAC4B,IAAI,CAAC;IAC9B;EACF;AACF,CAAC","names":["en","pt","axios","mapGetters","mapMutations","mapActions","GET_USER_TOKEN_GETTER","GET_USER_LEVEL_GETTER","GET_USER_ID_GETTER","AUTO_IMAGE_ACTION","LOGOUT_ACTION","name","mixins","data","lang","localStorage","getItem","img","require","message","type","msg","isShow","showsection","computed","token","level","_id","mounted","getApiaries","methods","getAccountInfo","get","headers","Authorization","then","response","console","log","body","catch","translate","prop"],"sourceRoot":"","sources":["C:\\Users\\duart\\OneDrive - PGA\\Ambiente de Trabalho\\bhivesenseweb\\bhivesenseweb\\src\\views\\Apiaries.vue"],"sourcesContent":["<template>\r\n  <div class=\"container justify-content-center\">\r\n    <h1 class=\"text-center mt-5\">{{ translate(\"apiaryAllTitle\") }}</h1>\r\n    <section\r\n      v-if=\"showsection\"\r\n      class=\"alert mt-3 alert-dismissible fade show\"\r\n      role=\"alert\"\r\n      v-bind:class=\"'alert-' + message.type\"\r\n    >\r\n      {{ message.msg }}\r\n    </section>\r\n    <div class=\"row mt-5\">\r\n      <div class=\"col-12 col-md-6 col-lg-3\">\r\n        <div class=\"card mb-5 mh-100\" style=\"border-radius: 35px\">\r\n          <img\r\n            :src=\"img\"\r\n            class=\"card-img-top\"\r\n            alt=\"...\"\r\n            style=\"\r\n              width: 50%;\r\n              display: block;\r\n              margin-right: auto;\r\n              margin-left: auto;\r\n            \"\r\n          />\r\n          <hr />\r\n          <div class=\"card-body\">\r\n            <h5 class=\"card-title text-center\">Apiary</h5>\r\n            <p class=\"card-text text-center\">Furnas</p>\r\n            <div class=\"text-center\">\r\n              <a href=\"#\" class=\"btn text-center bn\"\r\n                ><strong>Get inside</strong></a\r\n              >\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n</style>\r\n\r\n<script>\r\n  import en from \"../assets/en.js\";\r\n  import pt from \"../assets/pt.js\";\r\n  import axios from \"axios\";\r\n  import { mapGetters, mapMutations, mapActions } from \"vuex\";\r\n  import {\r\n    GET_USER_TOKEN_GETTER,\r\n    GET_USER_LEVEL_GETTER,\r\n    GET_USER_ID_GETTER,\r\n    AUTO_IMAGE_ACTION,\r\n    LOGOUT_ACTION,\r\n  } from \"../store/storeconstants\";\r\n  export default {\r\n    name: \"Apiaries\",\r\n    mixins: [en, pt],\r\n    data: function () {\r\n      const lang = localStorage.getItem(\"lang\") || \"pt\";\r\n      return {\r\n        img: require(\"../assets/IMG1220.png\"),\r\n        lang: lang,\r\n        message: {\r\n          type: \"\",\r\n          msg: \"\",\r\n        },\r\n        isShow: true,\r\n        //isModalVisible: false,\r\n        showsection: false,\r\n      };\r\n    },\r\n    computed: {\r\n      ...mapGetters(\"auth\", {\r\n        token: GET_USER_TOKEN_GETTER,\r\n        level: GET_USER_LEVEL_GETTER,\r\n        _id: GET_USER_ID_GETTER,\r\n      }),\r\n    },\r\n    mounted() {\r\n      this.getApiaries();\r\n    },\r\n    methods: {\r\n      async getAccountInfo() {\r\n        this.message.type = \"\";\r\n        this.message.msg = \"\";\r\n        this.isShow = false;\r\n        await axios\r\n          .get(\"https://bhsapi.duartecota.com/apiary\" + this._id, {\r\n            headers: {\r\n              Authorization: this.token,\r\n            },\r\n          })\r\n          .then((response) => {\r\n            console.log(response.data.body),\r\n              /*(this.form.firstname = response.data.body.firstname),\r\n                  (this.form.lastname = response.data.body.lastname),\r\n                  (this.form.name = response.data.body.name),\r\n                  (this.form.type = response.data.body.type),\r\n                  (this.form.nif = response.data.body.nif),\r\n                  (this.form.bdate = response.data.body.bdate),\r\n                  (this.form.email = response.data.body.email),\r\n                  (this.form.mobile = response.data.body.mobile),\r\n                  (this.form.notifications = response.data.body.notifications);*/\r\n\r\n              (this.isShow = false);\r\n          })\r\n          .catch(() => {\r\n            this.isShow = false;\r\n            this.showsection = true;\r\n            this.message.type = \"danger\";\r\n            this.message.msg = this.translate(\"mesProblem\");\r\n            this.isShow = true;\r\n          });\r\n      },\r\n      translate(prop) {\r\n        return this[this.lang][prop];\r\n      },\r\n    },\r\n  };\r\n</script>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}