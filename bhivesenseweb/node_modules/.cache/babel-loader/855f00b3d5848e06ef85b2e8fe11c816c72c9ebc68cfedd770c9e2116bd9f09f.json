{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, vShow as _vShow, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container my-body\"\n};\nconst _hoisted_2 = {\n  class: \"my-text-color\"\n};\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"section\", {\n  class: \"line-1\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_4 = {\n  class: \"mt-4\"\n};\nconst _hoisted_5 = {\n  key: 0\n};\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-calendar\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_7 = {\n  key: 1,\n  class: \"spinner-border spinner-border-sm\",\n  role: \"status\"\n};\nconst _hoisted_8 = {\n  key: 0,\n  class: \"mt-4\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_calendar = _resolveComponent(\"v-calendar\");\n  const _component_ModalDetails = _resolveComponent(\"ModalDetails\");\n  const _component_ModalDelete = _resolveComponent(\"ModalDelete\");\n  const _component_ModalConclude = _resolveComponent(\"ModalConclude\");\n  return _openBlock(), _createElementBlock(\"section\", _hoisted_1, [_createElementVNode(\"h2\", _hoisted_2, _toDisplayString($options.translate(\"interventionsTitle\")), 1 /* TEXT */), _hoisted_3, _createElementVNode(\"section\", _hoisted_4, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.formNew && $options.formNew(...args)),\n    class: \"btn my-button me-3\"\n  }, [!$data.isShow ? (_openBlock(), _createElementBlock(\"section\", _hoisted_5, [_hoisted_6, _createTextVNode(\" \" + _toDisplayString($options.translate(\"btnSchedule\")), 1 /* TEXT */)])) : (_openBlock(), _createElementBlock(\"section\", _hoisted_7))]), _createCommentVNode(\"<button @click=\\\"back\\\" class=\\\"btn my-button\\\">\\r\\n        <section v-if=\\\"!isShow\\\">\\r\\n          <i class=\\\"fas fa-arrow-left me-1 act-btn\\\" aria-hidden=\\\"true\\\"></i>\\r\\n          {{ translate(\\\"btnBack\\\") }}\\r\\n        </section>\\r\\n        <section\\r\\n          v-else\\r\\n          class=\\\"spinner-border spinner-border-sm\\\"\\r\\n          role=\\\"status\\\"\\r\\n        ></section>\\r\\n      </button>\")]), $data.hasInterventions != false ? (_openBlock(), _createElementBlock(\"section\", _hoisted_8, [_createVNode(_component_v_calendar, {\n    locale: $data.lang,\n    \"is-expanded\": \"\",\n    attributes: $options.attributes,\n    rows: 1,\n    columns: 3,\n    onDayclick: $options.dayClicked\n  }, null, 8 /* PROPS */, [\"locale\", \"attributes\", \"onDayclick\"])])) : _createCommentVNode(\"v-if\", true), _withDirectives(_createVNode(_component_ModalDetails, {\n    onClose: $options.closeDetailsModal,\n    onEdit: $options.edit,\n    onDone: $options.clickConclude,\n    onDelete: $options.clickcancel,\n    details: $data.details\n  }, null, 8 /* PROPS */, [\"onClose\", \"onEdit\", \"onDone\", \"onDelete\", \"details\"]), [[_vShow, $data.isModalDetailsVisible]]), _withDirectives(_createVNode(_component_ModalDelete, {\n    onClose: $options.closeDeleteModal,\n    onDeleteAction: $options._delete\n  }, null, 8 /* PROPS */, [\"onClose\", \"onDeleteAction\"]), [[_vShow, $data.isModalDeleteVisible]]), _withDirectives(_createVNode(_component_ModalConclude, {\n    onClose: $options.closeConcludeModal,\n    onConclude: $options.conclude\n  }, null, 8 /* PROPS */, [\"onClose\", \"onConclude\"]), [[_vShow, $data.isModalConcludeVisible]])]);\n}","map":{"version":3,"mappings":";;EACWA,KAAK,EAAC;AAAmB;;EAC5BA,KAAK,EAAC;AAAe;gCACzBC,oBAAkC;EAAzBD,KAAK,EAAC;AAAQ;;EACdA,KAAK,EAAC;AAAM;;;;gCAGfC,oBAAoC;EAAjCD,KAAK,EAAC;AAAsB;;;EAK/BA,KAAK,EAAC,kCAAkC;EACxCE,IAAI,EAAC;;;;EAgBFF,KAAK,EAAC;;;;;;;uBA5BjBG,oBA4DU,WA5DVC,UA4DU,GA3DRH,oBAAoE,MAApEI,UAAoE,mBAAvCC,kBAAS,wCACtCC,UAAkC,EAClCN,oBAuBU,WAvBVO,UAuBU,GAtBRP,oBAUS;IAVAQ,OAAK,yCAAEH,6CAAO;IAAEN,KAAK,EAAC;OACbU,YAAM,kBAAtBP,oBAGU,wBAFRQ,UAAoC,sBACpC,oBAAGL,kBAAS,oDAEdH,oBAIW,WAJXS,UAIW,MAEbC,uaAUY,IAGcH,sBAAgB,2BAA5CP,oBAUU,WAVVW,UAUU,GATRC,aAQaC;IAPVC,MAAM,EAAEP,UAAI;IACb,aAAW,EAAX,EAAW;IACVQ,UAAU,EAAEZ,mBAAU;IACtBa,IAAI,EAAE,CAAC;IACPC,OAAO,EAAE,CAAC;IACVC,UAAQ,EAAEf;0HAKfS,aAOEO;IALCC,OAAK,EAAEjB,0BAAiB;IACxBkB,MAAI,EAAElB,aAAI;IACVmB,MAAI,EAAEnB,sBAAa;IACnBoB,QAAM,EAAEpB,oBAAW;IACnBqB,OAAO,EAAEjB;6FALFA,2BAAqB,qBAQ/BK,aAIEa;IAFCL,OAAK,EAAEjB,yBAAgB;IACvBuB,cAAY,EAAEvB;oEAFPI,0BAAoB,qBAK9BK,aAIEe;IAFCP,OAAK,EAAEjB,2BAAkB;IACzByB,UAAQ,EAAEzB;gEAFHI,4BAAsB","names":["class","_createElementVNode","role","_createElementBlock","_hoisted_1","_hoisted_2","$options","_hoisted_3","_hoisted_4","onClick","$data","_hoisted_6","_hoisted_7","_createCommentVNode","_hoisted_8","_createVNode","_component_v_calendar","locale","attributes","rows","columns","onDayclick","_component_ModalDetails","onClose","onEdit","onDone","onDelete","details","_component_ModalDelete","onDeleteAction","_component_ModalConclude","onConclude"],"sourceRoot":"","sources":["C:\\Users\\duart\\OneDrive - PGA\\Ambiente de Trabalho\\bhivesenseweb\\bhivesenseweb\\src\\views\\Interventions.vue"],"sourcesContent":["<template>\r\n  <section class=\"container my-body\">\r\n    <h2 class=\"my-text-color\">{{ translate(\"interventionsTitle\") }}</h2>\r\n    <section class=\"line-1\"></section>\r\n    <section class=\"mt-4\">\r\n      <button @click=\"formNew\" class=\"btn my-button me-3\">\r\n        <section v-if=\"!isShow\">\r\n          <i class=\"fa-solid fa-calendar\"></i>\r\n          {{ translate(\"btnSchedule\") }}\r\n        </section>\r\n        <section\r\n          v-else\r\n          class=\"spinner-border spinner-border-sm\"\r\n          role=\"status\"\r\n        ></section>\r\n      </button>\r\n      <!--<button @click=\"back\" class=\"btn my-button\">\r\n        <section v-if=\"!isShow\">\r\n          <i class=\"fas fa-arrow-left me-1 act-btn\" aria-hidden=\"true\"></i>\r\n          {{ translate(\"btnBack\") }}\r\n        </section>\r\n        <section\r\n          v-else\r\n          class=\"spinner-border spinner-border-sm\"\r\n          role=\"status\"\r\n        ></section>\r\n      </button>-->\r\n    </section>\r\n\r\n    <section class=\"mt-4\" v-if=\"hasInterventions != false\">\r\n      <v-calendar\r\n        :locale=\"lang\"\r\n        is-expanded\r\n        :attributes=\"attributes\"\r\n        :rows=\"1\"\r\n        :columns=\"3\"\r\n        @dayclick=\"dayClicked\"\r\n      >\r\n      </v-calendar>\r\n    </section>\r\n\r\n    <ModalDetails\r\n      v-show=\"isModalDetailsVisible\"\r\n      @close=\"closeDetailsModal\"\r\n      @edit=\"edit\"\r\n      @done=\"clickConclude\"\r\n      @delete=\"clickcancel\"\r\n      :details=\"details\"\r\n    />\r\n\r\n    <ModalDelete\r\n      v-show=\"isModalDeleteVisible\"\r\n      @close=\"closeDeleteModal\"\r\n      @deleteAction=\"_delete\"\r\n    />\r\n\r\n    <ModalConclude\r\n      v-show=\"isModalConcludeVisible\"\r\n      @close=\"closeConcludeModal\"\r\n      @conclude=\"conclude\"\r\n    />\r\n  </section>\r\n</template>\r\n\r\n<style scoped>\r\n</style>\r\n\r\n<script>\r\n  import en from \"../assets/en.js\";\r\n  import pt from \"../assets/pt.js\";\r\n  import axios from \"axios\";\r\n  import { notify } from \"@kyvg/vue3-notification\";\r\n  import ModalDetails from \"../components/ModalInterventionDetails.vue\";\r\n  import ModalDelete from \"@/components/ModalDeleteIntervention.vue\";\r\n  import ModalConclude from \"@/components/ModalInterventionConcluded.vue\";\r\n  export default {\r\n    components: {\r\n      ModalDetails,\r\n      ModalDelete,\r\n      ModalConclude,\r\n    },\r\n    mixins: [en, pt],\r\n    data() {\r\n      const lang = localStorage.getItem(\"lang\") || \"pt\";\r\n      return {\r\n        interventions: [],\r\n        details: [],\r\n        lang: lang,\r\n        isShow: false,\r\n        hasInterventions: false,\r\n        isModalDetailsVisible: false,\r\n        isModalDeleteVisible: false,\r\n        isModalConcludeVisible: false,\r\n        description: \"\",\r\n        observations: \"\",\r\n        type: \"\",\r\n        color: \"\",\r\n\r\n        interventiontoedit: \"\",\r\n        warnForIntervention: false,\r\n      };\r\n    },\r\n    computed: {\r\n      attributes() {\r\n        return [\r\n          ...this.interventions.map((todo) => ({\r\n            _id: todo._id,\r\n            dates: todo.dates,\r\n            highlight: {\r\n              color: todo.color,\r\n              start: {\r\n                fillMode: \"solid\",\r\n                color: todo.isComplete ? \"gray\" : todo.color,\r\n              },\r\n              base: {\r\n                fillMode: \"light\",\r\n                color: todo.isComplete ? \"gray\" : todo.color,\r\n              },\r\n              end: {\r\n                fillMode: \"solid\",\r\n                color: todo.isComplete ? \"gray\" : todo.color,\r\n              },\r\n            },\r\n            popover: {\r\n              label: todo.description,\r\n              visibility: \"hover\",\r\n            },\r\n          })),\r\n        ];\r\n      },\r\n    },\r\n    mounted() {\r\n      this.getInterventions();\r\n    },\r\n    methods: {\r\n      async getInterventions() {\r\n        this.interventions = [];\r\n        this.isShow = true;\r\n        await axios\r\n          .get(\r\n            \"https://bhsapi.duartecota.com/intervention/apiary/\" +\r\n              localStorage.getItem(\"idtointerventions\"),\r\n            {\r\n              headers: {\r\n                Authorization: this.token,\r\n              },\r\n            }\r\n          )\r\n          .then((response) => {\r\n            this.isShow = false;\r\n            if (response.data.body.length == 0) {\r\n              this.hasInterventions = false;\r\n              notify({\r\n                title: this.translate(\"notifWarningTitle\"),\r\n                text: this.translate(\"mesNoInterventions\"),\r\n                type: \"warn\",\r\n                duration: 3000,\r\n                speed: 500,\r\n              });\r\n            } else {\r\n              this.hasInterventions = true;\r\n              this.interventions = [];\r\n              let resArray = response.data.body;\r\n              for (let i = 0; i < resArray.length; i++) {\r\n                let sd = new Date(resArray[i].startDate);\r\n                let ed = new Date(resArray[i].endDate);\r\n                let dates = \"\";\r\n                dates = {\r\n                  start: sd,\r\n                  end: ed,\r\n                };\r\n                let color = \"\";\r\n                if (resArray[i].type == 1) color = \"green\";\r\n                else if (resArray[i].type == 2) color = \"orange\";\r\n                else color = \"red\";\r\n                let today = new Date();\r\n                if (\r\n                  (sd < today || ed < today) &&\r\n                  resArray[i].concluded == false\r\n                ) {\r\n                  color = \"gray\";\r\n                  this.warnForIntervention = true;\r\n                }\r\n                this.interventions.push({\r\n                  _id: resArray[i]._id,\r\n                  color: color,\r\n                  dates: dates,\r\n                  description: resArray[i].description,\r\n                  startTime: resArray[i].startTime,\r\n                  endTime: resArray[i].endTime,\r\n                  observations: resArray[i].observations,\r\n                  type: resArray[i].type,\r\n                  isComplete: resArray[i].concluded,\r\n                });\r\n              }\r\n              if (this.warnForIntervention) {\r\n                notify({\r\n                  title: this.translate(\"notifWarningTitle\"),\r\n                  text: this.translate(\"notInterventionPassed\"),\r\n                  type: \"warn\",\r\n                  duration: 3000,\r\n                  speed: 500,\r\n                });\r\n              }\r\n            }\r\n          })\r\n          .catch(() => {\r\n            this.isShow = false;\r\n            notify({\r\n              title: this.translate(\"notifErrorTitle\"),\r\n              text: this.translate(\"mesProblem\"),\r\n              type: \"error\",\r\n              duration: 3000,\r\n              speed: 500,\r\n            });\r\n          });\r\n      },\r\n      async _delete() {\r\n        this.isModalDeleteVisible = false;\r\n        this.isShow = true;\r\n        let id = localStorage.getItem(\"interventiontoedit\");\r\n        await axios\r\n          .delete(\"https://bhsapi.duartecota.com/intervention/one/\" + id, {\r\n            headers: {\r\n              Authorization: this.token,\r\n            },\r\n          })\r\n          .then((response) => {\r\n            if (response.data.http == 200) {\r\n              this.isShow = false;\r\n              notify({\r\n                title: this.translate(\"notifSuccessTitle\"),\r\n                text: this.translate(\"deleteInterventionMessage\"),\r\n                type: \"success\",\r\n                duration: 3000,\r\n                speed: 500,\r\n              });\r\n              this.getInterventions();\r\n            } else {\r\n              this.isShow = false;\r\n              notify({\r\n                title: this.translate(\"notifErrorTitle\"),\r\n                text: this.translate(\"mesProblem\"),\r\n                type: \"error\",\r\n                duration: 3000,\r\n                speed: 500,\r\n              });\r\n            }\r\n          })\r\n          .catch(() => {\r\n            this.isShow = false;\r\n            notify({\r\n              title: this.translate(\"notifErrorTitle\"),\r\n              text: this.translate(\"mesProblem\"),\r\n              type: \"error\",\r\n              duration: 3000,\r\n              speed: 500,\r\n            });\r\n          });\r\n      },\r\n      translate(prop) {\r\n        return this[this.lang][prop];\r\n      },\r\n      padTo2Digits(num) {\r\n        return String(num).padStart(2, \"0\");\r\n      },\r\n      dayClicked(day) {\r\n        this.interventiontoedit = \"\";\r\n        this.details = [];\r\n        let date = new Date(day.id);\r\n        for (let i = 0; i < this.interventions.length; i++) {\r\n          let sd = new Date(this.interventions[i].dates.start);\r\n          let sdConv = this.padTo2Digits(\r\n            sd.toLocaleDateString(\"sv-SE\", {\r\n              year: \"numeric\",\r\n              month: \"2-digit\",\r\n              day: \"2-digit\",\r\n            })\r\n          );\r\n          let sdFinal = new Date(sdConv);\r\n          let ed = new Date(this.interventions[i].dates.end);\r\n          let edConv = this.padTo2Digits(\r\n            ed.toLocaleDateString(\"sv-SE\", {\r\n              year: \"numeric\",\r\n              month: \"2-digit\",\r\n              day: \"2-digit\",\r\n            })\r\n          );\r\n          let edFinal = new Date(edConv);\r\n          if (\r\n            date.getTime() >= sdFinal.getTime() &&\r\n            date.getTime() <= edFinal.getTime()\r\n          ) {\r\n            let type = this.interventions[i].type;\r\n            switch (type) {\r\n              case 1:\r\n                this.type = this.translate(\"formNewInterventionType1\");\r\n                break;\r\n              case 2:\r\n                this.type = this.translate(\"formNewInterventionType2\");\r\n                break;\r\n              case 3:\r\n                this.type = this.translate(\"formNewInterventionType3\");\r\n                break;\r\n            }\r\n            /*this.interventiontoedit = this.interventions[i]._id;\r\n                          localStorage.setItem(\"interventiontoedit\", this.interventiontoedit);\r\n                          this.description = this.interventions[i].description;\r\n                          this.observations = this.interventions[i].observations;\r\n                          this.color = this.interventions[i].color;\r\n                          this.isModalDetailsVisible = true;\r\n                          break;*/\r\n            let instance = {\r\n              _id: this.interventions[i]._id,\r\n              apiary: this.interventions[i].apiary,\r\n              address: this.interventions[i].address,\r\n              location: this.interventions[i].location,\r\n              ap_observations: this.interventions[i].ap_observations,\r\n              color: this.interventions[i].color,\r\n              startDate: sdConv,\r\n              endDate: edConv,\r\n              startTime: this.interventions[i].startTime,\r\n              endTime: this.interventions[i].endTime,\r\n              description: this.interventions[i].description,\r\n              observations: this.interventions[i].observations,\r\n              type: this.type,\r\n            };\r\n            console.log(instance);\r\n            this.details.push(instance);\r\n          }\r\n          this.isModalDetailsVisible = true;\r\n        }\r\n      },\r\n      back() {\r\n        this.$router.push(\"apiaries\");\r\n      },\r\n      formNew() {\r\n        this.$router.push(\"newintervention\");\r\n      },\r\n      closeDetailsModal() {\r\n        this.isModalDetailsVisible = false;\r\n      },\r\n      closeDeleteModal() {\r\n        this.isModalDeleteVisible = false;\r\n      },\r\n      closeConcludeModal() {\r\n        this.isModalConcludeVisible = false;\r\n      },\r\n      edit() {\r\n        this.isModalDetailsVisible = false;\r\n        //localStorage.setItem(\"interventiontoedit\", this.interventiontoedit);\r\n        this.$router.push(\"editintervention\");\r\n      },\r\n      async conclude() {\r\n        this.isModalConcludeVisible = false;\r\n        this.isShow = true;\r\n        let id = localStorage.getItem(\"interventiontoedit\");\r\n        await axios\r\n          .put(\"https://bhsapi.duartecota.com/intervention/one/\" + id, {\r\n            headers: {\r\n              Authorization: this.token,\r\n            },\r\n          })\r\n          .then((response) => {\r\n            if (response.data.http == 200) {\r\n              this.isShow = false;\r\n              notify({\r\n                title: this.translate(\"notifSuccessTitle\"),\r\n                text: this.translate(\"concludeInterventionMessage\"),\r\n                type: \"success\",\r\n                duration: 3000,\r\n                speed: 500,\r\n              });\r\n              this.warnForIntervention = false;\r\n              this.getInterventions();\r\n            } else {\r\n              this.isShow = false;\r\n              notify({\r\n                title: this.translate(\"notifErrorTitle\"),\r\n                text: this.translate(\"mesProblem\"),\r\n                type: \"error\",\r\n                duration: 3000,\r\n                speed: 500,\r\n              });\r\n            }\r\n          })\r\n          .catch(() => {\r\n            this.isShow = false;\r\n            notify({\r\n              title: this.translate(\"notifErrorTitle\"),\r\n              text: this.translate(\"mesProblem\"),\r\n              type: \"error\",\r\n              duration: 3000,\r\n              speed: 500,\r\n            });\r\n          });\r\n      },\r\n      clickcancel() {\r\n        this.isModalDetailsVisible = false;\r\n        this.isModalDeleteVisible = true;\r\n      },\r\n      clickConclude() {\r\n        this.isModalDetailsVisible = false;\r\n        this.isModalConcludeVisible = true;\r\n      },\r\n    },\r\n  };\r\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}