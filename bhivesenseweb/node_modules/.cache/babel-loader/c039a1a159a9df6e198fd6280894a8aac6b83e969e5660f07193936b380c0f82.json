{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport en from \"../assets/en.js\";\nimport pt from \"../assets/pt.js\";\nimport axios from \"axios\";\nimport { notify } from \"@kyvg/vue3-notification\";\nimport ModalAnswer from \"../components/ModalAnswer\";\nimport { mapGetters } from \"vuex\";\nimport { GET_USER_TOKEN_GETTER, GET_USER_LEVEL_GETTER, GET_USER_ID_GETTER } from \"../store/storeconstants\";\n//import { LOADING_SPINNER_SHOW_MUTATION } from \"../store/storeconstants\";\nexport default {\n  mixins: [en, pt],\n  components: {\n    ModalAnswer\n  },\n  data() {\n    const lang = localStorage.getItem(\"lang\") || \"pt\";\n    return {\n      data: localStorage.token,\n      messages: [],\n      name: \"\",\n      email: \"\",\n      subject: \"\",\n      message: \"\",\n      isShow: false,\n      lang: lang,\n      isModalAnswerVisible: false,\n      isModalDeleteVisible: false,\n      usertodelete: \"\",\n      hasNewMessages: false\n    };\n  },\n  computed: {\n    ...mapGetters(\"auth\", {\n      token: GET_USER_TOKEN_GETTER,\n      level: GET_USER_LEVEL_GETTER,\n      _id: GET_USER_ID_GETTER\n    })\n  },\n  mounted() {\n    this.getMessages();\n  },\n  methods: {\n    translate(prop) {\n      return this[this.lang][prop];\n    },\n    async getMessages() {\n      this.messages = [];\n      this.isShow = true;\n      await axios.get(\"https://bhsapi.duartecota.com/report\", {\n        headers: {\n          Authorization: this.token\n        }\n      }).then(response => {\n        this.messages = [];\n        this.isShow = false;\n        let messages = response.data.body;\n        console.log(messages.lenght);\n        this.hasNewMessages = true;\n        for (let i = 0; i < messages.length; i++) {\n          if (messages[i].answered == false) {\n            let date = new Date(messages[i].registration_date);\n            let year = date.getFullYear();\n            let month = date.getMonth() + 1 < 10 ? \"0\" + (date.getMonth() + 1) : date.getMonth() + 1;\n            let day = date.getDate() < 10 ? \"0\" + date.getDate() : date.getDate();\n            this.messages.push({\n              _id: messages[i]._id,\n              name: messages[i].name,\n              email: messages[i].email,\n              date: year + \"-\" + month + \"-\" + day,\n              answered: messages[i].answered\n            });\n          }\n          if (this.messages.length == 0) this.hasNewMessages = false;\n        }\n      }).catch(error => {\n        alert(error);\n      });\n    },\n    async cancel(id) {\n      await axios.put(\"https://bhsapi.duartecota.com/user/\" + id, {\n        headers: {\n          Authorization: this.token\n        }\n      }).then(response => {\n        if (response.data.http == 200) {\n          this.isShow = false;\n          notify({\n            title: this.translate(\"notifSuccessTitle\"),\n            text: this.translate(\"cancelAccMessage\"),\n            type: \"success\",\n            duration: 3000,\n            speed: 500\n          });\n          this.getUsers();\n        } else {\n          this.isShow = false;\n          notify({\n            title: this.translate(\"notifErrorTitle\"),\n            text: this.translate(\"mesProblem\"),\n            type: \"error\",\n            duration: 3000,\n            speed: 500\n          });\n        }\n      }).catch(() => {\n        this.isShow = false;\n        notify({\n          title: this.translate(\"notifErrorTitle\"),\n          text: this.translate(\"mesProblem\"),\n          type: \"error\",\n          duration: 3000,\n          speed: 500\n        });\n      });\n    },\n    async detail(id) {\n      this.isShow = true;\n      await axios.get(\"https://bhsapi.duartecota.com/report/\" + id, {\n        headers: {\n          Authorization: this.token\n        }\n      }).then(response => {\n        this.name = response.data.body.name;\n        this.email = response.data.body.email;\n        this.subject = response.data.body.subject;\n        this.message = response.data.body.message;\n        this.isShow = false;\n        return true;\n      }).catch(() => {\n        notify({\n          title: this.translate(\"notifErrorTitle\"),\n          text: this.translate(\"mesProblem\"),\n          type: \"error\",\n          duration: 3000,\n          speed: 500\n        });\n        this.isShow = false;\n        return false;\n      });\n    },\n    async answerModal(id) {\n      localStorage.setItem(\"idtoanswer\", id);\n      await this.detail(id);\n      this.isModalAnswerVisible = true;\n    },\n    async answer() {\n      this.isModalAnswerVisible = false;\n      this.isShow = true;\n      let postData = {\n        text: localStorage.getItem(\"messagetosend\"),\n        lang: this.lang\n      };\n      let id = localStorage.getItem(\"idtoanswer\");\n      await axios.put(\"https://bhsapi.duartecota.com/report/\" + id, postData, {\n        headers: {\n          Authorization: this.token\n        }\n      }).then(response => {\n        if (response.data.http == 200) {\n          this.isShow = false;\n          notify({\n            title: this.translate(\"notifSuccessTitle\"),\n            text: this.translate(\"reportSuccess\"),\n            type: \"success\",\n            duration: 3000,\n            speed: 500\n          });\n          this.getMessages();\n          return true;\n        }\n      }).catch(() => {\n        notify({\n          title: this.translate(\"notifErrorTitle\"),\n          text: this.translate(\"mesProblem\"),\n          type: \"error\",\n          duration: 3000,\n          speed: 500\n        });\n        this.isShow = false;\n        return false;\n      });\n    },\n    async deleteModal(id) {\n      this.usertodelete = id;\n      this.isModalDeleteVisible = true;\n    },\n    closeModalAnswer() {\n      this.isModalAnswerVisible = false;\n    },\n    closeModalDelete() {\n      this.isModalDeleteVisible = false;\n    },\n    async cancelUser(id) {\n      await this.cancel(this.usertodelete);\n      this.isModalDeleteVisible = false;\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["en","pt","axios","notify","ModalAnswer","mapGetters","GET_USER_TOKEN_GETTER","GET_USER_LEVEL_GETTER","GET_USER_ID_GETTER","mixins","components","data","lang","localStorage","getItem","token","messages","name","email","subject","message","isShow","isModalAnswerVisible","isModalDeleteVisible","usertodelete","hasNewMessages","computed","level","_id","mounted","getMessages","methods","translate","prop","get","headers","Authorization","then","response","body","console","log","lenght","i","length","answered","date","Date","registration_date","year","getFullYear","month","getMonth","day","getDate","push","catch","error","alert","cancel","id","put","http","title","text","type","duration","speed","getUsers","detail","answerModal","setItem","answer","postData","deleteModal","closeModalAnswer","closeModalDelete","cancelUser"],"sourceRoot":"","sources":["C:\\Users\\duart\\OneDrive - PGA\\Ambiente de Trabalho\\bhivesenseweb\\bhivesenseweb\\src\\views\\Newmessages.vue"],"sourcesContent":["/*\r\nMEIW - Programação Web Avançada - projeto final\r\nAuhtor: Duarte Cota\r\nDescription: implementation of the view Gestão de Alunos (Admin)\r\n*/\r\n\r\n<template id=\"example-modal\">\r\n  <section class=\"container my-body\">\r\n    <h1 class=\"my-text-color\">{{ translate(\"newMessagesTitle\") }}</h1>\r\n    <section class=\"line-1\"></section>\r\n    <section class=\"row mt-3\">\r\n      <h4 class=\"my-text-color\">{{ translate(\"messagesLbl\") }}</h4>\r\n    </section>\r\n    <section class=\"card mt-2\" v-if=\"hasNewMessages\">\r\n      <section\r\n        class=\"card-body\"\r\n        style=\"\r\n          border-radius: 3px;\r\n          box-shadow: rgba(0, 0, 0, 0.25) 0px 14px 28px,\r\n            rgba(0, 0, 0, 0.22) 0px 10px 10px;\r\n        \"\r\n      >\r\n        <table class=\"table mt-2\">\r\n          <tbody>\r\n            <tr>\r\n              <th>{{ translate(\"tdFrom\") }}</th>\r\n              <th>{{ translate(\"tdDate\") }}</th>\r\n              <th class=\"text-center\">{{ translate(\"thdUsersActions\") }}</th>\r\n            </tr>\r\n            <tr v-for=\"msg of this.messages\" :key=\"msg._id\">\r\n              <td>{{ msg.name }}</td>\r\n              <td>{{ msg.date }}</td>\r\n              <td class=\"text-center\">\r\n                <button\r\n                  @click=\"answerModal(msg._id)\"\r\n                  type=\"button\"\r\n                  class=\"btn btn-success btn-sm me-2 ac-btn\"\r\n                >\r\n                  {{ translate(\"btnAnswer\") }}\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </section>\r\n    </section>\r\n    <section v-else>\r\n      <section class=\"card mt-2\">\r\n        <section\r\n          class=\"card-body\"\r\n          style=\"\r\n            border-radius: 3px;\r\n            box-shadow: rgba(0, 0, 0, 0.25) 0px 14px 28px,\r\n              rgba(0, 0, 0, 0.22) 0px 10px 10px;\r\n          \"\r\n        >\r\n          <h3 class=\"text-center\">No new messages</h3>\r\n        </section>\r\n      </section>\r\n    </section>\r\n    <ModalAnswer\r\n      v-show=\"isModalAnswerVisible\"\r\n      @close=\"closeModalAnswer\"\r\n      @answer=\"answer\"\r\n      :name=\"name\"\r\n      :email=\"email\"\r\n      :subject=\"subject\"\r\n      :message=\"message\"\r\n    />\r\n    <section class=\"text-center\">\r\n      <section v-if=\"isShow\" class=\"text-center\">\r\n        <section class=\"spinner-border mt-4\" role=\"status\">\r\n          <span class=\"visually-hidden\">Loading...</span>\r\n        </section>\r\n        <section class=\"mb-2\">{{ translate(\"spinnerTxt\") }}</section>\r\n      </section>\r\n    </section>\r\n    <section class=\"spacer\"></section>\r\n  </section>\r\n</template>\r\n\r\n<style scoped>\r\n.ac-btn {\r\n  width: 120px;\r\n  color: white;\r\n  font-weight: bold;\r\n}\r\n.spacer {\r\n  height: 200px;\r\n}\r\n</style>\r\n\r\n<script>\r\n  import en from \"../assets/en.js\";\r\n  import pt from \"../assets/pt.js\";\r\n  import axios from \"axios\";\r\n  import { notify } from \"@kyvg/vue3-notification\";\r\n  import ModalAnswer from \"../components/ModalAnswer\";\r\n  import { mapGetters } from \"vuex\";\r\n  import {\r\n    GET_USER_TOKEN_GETTER,\r\n    GET_USER_LEVEL_GETTER,\r\n    GET_USER_ID_GETTER,\r\n  } from \"../store/storeconstants\";\r\n  //import { LOADING_SPINNER_SHOW_MUTATION } from \"../store/storeconstants\";\r\n  export default {\r\n    mixins: [en, pt],\r\n    components: {\r\n      ModalAnswer,\r\n    },\r\n    data() {\r\n      const lang = localStorage.getItem(\"lang\") || \"pt\";\r\n      return {\r\n        data: localStorage.token,\r\n        messages: [],\r\n        name: \"\",\r\n        email: \"\",\r\n        subject: \"\",\r\n        message: \"\",\r\n        isShow: false,\r\n        lang: lang,\r\n        isModalAnswerVisible: false,\r\n        isModalDeleteVisible: false,\r\n        usertodelete: \"\",\r\n        hasNewMessages: false,\r\n      };\r\n    },\r\n    computed: {\r\n      ...mapGetters(\"auth\", {\r\n        token: GET_USER_TOKEN_GETTER,\r\n        level: GET_USER_LEVEL_GETTER,\r\n        _id: GET_USER_ID_GETTER,\r\n      }),\r\n    },\r\n    mounted() {\r\n      this.getMessages();\r\n    },\r\n    methods: {\r\n      translate(prop) {\r\n        return this[this.lang][prop];\r\n      },\r\n      async getMessages() {\r\n        this.messages = [];\r\n        this.isShow = true;\r\n        await axios\r\n          .get(\"https://bhsapi.duartecota.com/report\", {\r\n            headers: {\r\n              Authorization: this.token,\r\n            },\r\n          })\r\n          .then((response) => {\r\n            this.messages = [];\r\n            this.isShow = false;\r\n            let messages = response.data.body;\r\n            console.log(messages.lenght);\r\n            this.hasNewMessages = true;\r\n            for (let i = 0; i < messages.length; i++) {\r\n              if (messages[i].answered == false) {\r\n                let date = new Date(messages[i].registration_date);\r\n                let year = date.getFullYear();\r\n                let month =\r\n                  date.getMonth() + 1 < 10\r\n                    ? \"0\" + (date.getMonth() + 1)\r\n                    : date.getMonth() + 1;\r\n                let day =\r\n                  date.getDate() < 10 ? \"0\" + date.getDate() : date.getDate();\r\n                this.messages.push({\r\n                  _id: messages[i]._id,\r\n                  name: messages[i].name,\r\n                  email: messages[i].email,\r\n                  date: year + \"-\" + month + \"-\" + day,\r\n                  answered: messages[i].answered,\r\n                });\r\n              }\r\n              if (this.messages.length == 0) this.hasNewMessages = false;\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            alert(error);\r\n          });\r\n      },\r\n      async cancel(id) {\r\n        await axios\r\n          .put(\"https://bhsapi.duartecota.com/user/\" + id, {\r\n            headers: {\r\n              Authorization: this.token,\r\n            },\r\n          })\r\n          .then((response) => {\r\n            if (response.data.http == 200) {\r\n              this.isShow = false;\r\n              notify({\r\n                title: this.translate(\"notifSuccessTitle\"),\r\n                text: this.translate(\"cancelAccMessage\"),\r\n                type: \"success\",\r\n                duration: 3000,\r\n                speed: 500,\r\n              });\r\n              this.getUsers();\r\n            } else {\r\n              this.isShow = false;\r\n              notify({\r\n                title: this.translate(\"notifErrorTitle\"),\r\n                text: this.translate(\"mesProblem\"),\r\n                type: \"error\",\r\n                duration: 3000,\r\n                speed: 500,\r\n              });\r\n            }\r\n          })\r\n          .catch(() => {\r\n            this.isShow = false;\r\n            notify({\r\n              title: this.translate(\"notifErrorTitle\"),\r\n              text: this.translate(\"mesProblem\"),\r\n              type: \"error\",\r\n              duration: 3000,\r\n              speed: 500,\r\n            });\r\n          });\r\n      },\r\n      async detail(id) {\r\n        this.isShow = true;\r\n        await axios\r\n          .get(\"https://bhsapi.duartecota.com/report/\" + id, {\r\n            headers: {\r\n              Authorization: this.token,\r\n            },\r\n          })\r\n          .then((response) => {\r\n            this.name = response.data.body.name;\r\n            this.email = response.data.body.email;\r\n            this.subject = response.data.body.subject;\r\n            this.message = response.data.body.message;\r\n            this.isShow = false;\r\n            return true;\r\n          })\r\n          .catch(() => {\r\n            notify({\r\n              title: this.translate(\"notifErrorTitle\"),\r\n              text: this.translate(\"mesProblem\"),\r\n              type: \"error\",\r\n              duration: 3000,\r\n              speed: 500,\r\n            });\r\n            this.isShow = false;\r\n            return false;\r\n          });\r\n      },\r\n      async answerModal(id) {\r\n        localStorage.setItem(\"idtoanswer\", id);\r\n        await this.detail(id);\r\n        this.isModalAnswerVisible = true;\r\n      },\r\n      async answer() {\r\n        this.isModalAnswerVisible = false;\r\n        this.isShow = true;\r\n        let postData = {\r\n          text: localStorage.getItem(\"messagetosend\"),\r\n          lang: this.lang,\r\n        };\r\n        let id = localStorage.getItem(\"idtoanswer\");\r\n        await axios\r\n          .put(\"https://bhsapi.duartecota.com/report/\" + id, postData, {\r\n            headers: {\r\n              Authorization: this.token,\r\n            },\r\n          })\r\n          .then((response) => {\r\n            if (response.data.http == 200) {\r\n              this.isShow = false;\r\n              notify({\r\n                title: this.translate(\"notifSuccessTitle\"),\r\n                text: this.translate(\"reportSuccess\"),\r\n                type: \"success\",\r\n                duration: 3000,\r\n                speed: 500,\r\n              });\r\n              this.getMessages();\r\n              return true;\r\n            }\r\n          })\r\n          .catch(() => {\r\n            notify({\r\n              title: this.translate(\"notifErrorTitle\"),\r\n              text: this.translate(\"mesProblem\"),\r\n              type: \"error\",\r\n              duration: 3000,\r\n              speed: 500,\r\n            });\r\n            this.isShow = false;\r\n            return false;\r\n          });\r\n      },\r\n      async deleteModal(id) {\r\n        this.usertodelete = id;\r\n        this.isModalDeleteVisible = true;\r\n      },\r\n      closeModalAnswer() {\r\n        this.isModalAnswerVisible = false;\r\n      },\r\n      closeModalDelete() {\r\n        this.isModalDeleteVisible = false;\r\n      },\r\n      async cancelUser(id) {\r\n        await this.cancel(this.usertodelete);\r\n        this.isModalDeleteVisible = false;\r\n      },\r\n    },\r\n  };\r\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}