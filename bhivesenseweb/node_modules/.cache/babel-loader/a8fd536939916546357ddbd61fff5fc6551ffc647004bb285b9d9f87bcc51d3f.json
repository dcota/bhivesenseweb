{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createBlock as _createBlock, vShow as _vShow, createVNode as _createVNode, withDirectives as _withDirectives, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-1bfd9fe3\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"container my-body\"\n};\nconst _hoisted_2 = {\n  class: \"my-text-color\"\n};\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"section\", {\n  class: \"line-1\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_4 = {\n  key: 0\n};\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fas fa-arrow-left me-1 act-btn\",\n  \"aria-hidden\": \"true\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_6 = {\n  key: 1,\n  class: \"spinner-border spinner-border-sm\",\n  role: \"status\"\n};\nconst _hoisted_7 = {\n  key: 0\n};\nconst _hoisted_8 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fas fa-plus me-1 act-btn\",\n  \"aria-hidden\": \"true\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_9 = {\n  key: 1,\n  class: \"spinner-border spinner-border-sm\",\n  role: \"status\"\n};\nconst _hoisted_10 = {\n  key: 0,\n  class: \"mt-3\"\n};\nconst _hoisted_11 = {\n  key: 0,\n  class: \"card p-2 mt-3\",\n  style: {\n    \"border-radius\": \"10px\"\n  }\n};\nconst _hoisted_12 = [\"innerHTML\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_line_chart = _resolveComponent(\"line-chart\");\n  const _component_ModalHarvest = _resolveComponent(\"ModalHarvest\");\n  return _openBlock(), _createElementBlock(\"section\", _hoisted_1, [_createElementVNode(\"h2\", _hoisted_2, _toDisplayString($options.translate(\"productionHiveTitle\")), 1 /* TEXT */), _hoisted_3, _createElementVNode(\"section\", null, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.back && $options.back(...args)),\n    type: \"button\",\n    class: \"btn mt-4 me-3 my-button\"\n  }, [!_ctx.isShow ? (_openBlock(), _createElementBlock(\"section\", _hoisted_4, [_hoisted_5, _createTextVNode(\" \" + _toDisplayString($options.translate(\"btnBack\")), 1 /* TEXT */)])) : (_openBlock(), _createElementBlock(\"section\", _hoisted_6))]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.modalHarvest && $options.modalHarvest(...args)),\n    type: \"button\",\n    class: \"btn mt-4 my-button\"\n  }, [!_ctx.isShow ? (_openBlock(), _createElementBlock(\"section\", _hoisted_7, [_hoisted_8, _createTextVNode(\" \" + _toDisplayString($options.translate(\"dashHarvestTitle\")), 1 /* TEXT */)])) : (_openBlock(), _createElementBlock(\"section\", _hoisted_9))]), _ctx.hasData ? (_openBlock(), _createElementBlock(\"section\", _hoisted_10, [_createElementVNode(\"h5\", null, _toDisplayString($options.translate(\"totalHiveProduction\")) + \" \" + _toDisplayString(_ctx.total) + \" kg\", 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true)]), _ctx.hasData ? (_openBlock(), _createElementBlock(\"section\", _hoisted_11, [_createElementVNode(\"section\", {\n    class: \"h5 text-center\",\n    id: \"title\",\n    innerHTML: _ctx.title\n  }, null, 8 /* PROPS */, _hoisted_12), _ctx.loaded ? (_openBlock(), _createBlock(_component_line_chart, {\n    key: 0,\n    data: _ctx.hiveProduction,\n    min: 0,\n    max: _ctx.max,\n    download: true,\n    width: \"100%\",\n    class: \"ch\",\n    colors: ['#a17f05'],\n    dataset: {\n      borderWidth: 2\n    },\n    loading: \"Loading...\",\n    xtitle: \"Date\",\n    ytitle: _ctx.ytitle\n  }, null, 8 /* PROPS */, [\"data\", \"max\", \"ytitle\"])) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true), _withDirectives(_createVNode(_component_ModalHarvest, {\n    value: _ctx.value,\n    onClose: $options.closeModalHarvest,\n    onRegister: $options.register\n  }, null, 8 /* PROPS */, [\"value\", \"onClose\", \"onRegister\"]), [[_vShow, _ctx.isModalHarvestVisible]])]);\n}","map":{"version":3,"mappings":";;;EACWA,KAAK,EAAC;AAAmB;;EAC5BA,KAAK,EAAC;AAAe;gEACzBC,oBAAkC;EAAzBD,KAAK,EAAC;AAAQ;;;;gEAIjBC,oBAAiE;EAA9DD,KAAK,EAAC,gCAAgC;EAAC,aAAW,EAAC;;;;EAKtDA,KAAK,EAAC,kCAAkC;EACxCE,IAAI,EAAC;;;;;gEAKLD,oBAA2D;EAAxDD,KAAK,EAAC,0BAA0B;EAAC,aAAW,EAAC;;;;EAKhDA,KAAK,EAAC,kCAAkC;EACxCE,IAAI,EAAC;;;;EAGeF,KAAK,EAAC;;;;EAKvBA,KAAK,EAAC,eAAe;EAAgBG,KAA2B,EAA3B;IAAA;EAAA;;;;;;uBA/BhDC,oBAsDU,WAtDVC,UAsDU,GArDRJ,oBAAqE,MAArEK,UAAqE,mBAAxCC,kBAAS,yCACtCC,UAAkC,EAClCP,oBA0BU,kBAzBRA,oBAUS;IAVAQ,OAAK,yCAAEF,uCAAI;IAAEG,IAAI,EAAC,QAAQ;IAACV,KAAK,EAAC;OACxBW,WAAM,kBAAtBP,oBAGU,wBAFRQ,UAAiE,sBACjE,oBAAGL,kBAAS,gDAEdH,oBAIW,WAJXS,UAIW,MAEbZ,oBAUS;IAVAQ,OAAK,yCAAEF,uDAAY;IAAEG,IAAI,EAAC,QAAQ;IAACV,KAAK,EAAC;OAChCW,WAAM,kBAAtBP,oBAGU,wBAFRU,UAA2D,sBAC3D,oBAAGP,kBAAS,yDAEdH,oBAIW,WAJXW,UAIW,MAEEJ,YAAO,kBAAtBP,oBAEU,WAFVY,WAEU,GADRf,oBAA8D,6BAAvDM,kBAAS,2BAA0B,GAAC,oBAAGI,UAAK,IAAG,KAAG,0DAIxBA,YAAO,kBAA5CP,oBAgBU,WAhBVa,WAgBU,GAfRhB,oBAAoE;IAA3DD,KAAK,EAAC,gBAAgB;IAACkB,EAAE,EAAC,OAAO;IAACC,SAAc,EAANR;wCAE3CA,WAAM,kBADdS,aAacC;;IAXXC,IAAI,EAAEX,mBAAc;IACpBY,GAAG,EAAE,CAAC;IACNC,GAAG,EAAEb,QAAG;IACRc,QAAQ,EAAE,IAAI;IACfC,KAAK,EAAC,MAAM;IACZ1B,KAAK,EAAC,IAAI;IACT2B,MAAM,EAAE,WAAW;IACnBC,OAAO,EAAE;MAAAC;IAAA,CAAkB;IAC5BC,OAAO,EAAC,YAAY;IACpBC,MAAM,EAAC,MAAM;IACZC,MAAM,EAAErB;kJAGbsB,aAKEC;IAHCC,KAAK,EAAExB,UAAK;IACZyB,OAAK,EAAE7B,0BAAiB;IACxB8B,UAAQ,EAAE9B;yEAHHI,0BAAqB","names":["class","_createElementVNode","role","style","_createElementBlock","_hoisted_1","_hoisted_2","$options","_hoisted_3","onClick","type","_ctx","_hoisted_5","_hoisted_6","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","id","innerHTML","_createBlock","_component_line_chart","data","min","max","download","width","colors","dataset","borderWidth","loading","xtitle","ytitle","_createVNode","_component_ModalHarvest","value","onClose","onRegister"],"sourceRoot":"","sources":["C:\\Users\\duart\\Desktop\\bhivesenseweb\\bhivesenseweb\\src\\views\\Productionhive.vue"],"sourcesContent":["<template>\r\n  <section class=\"container my-body\">\r\n    <h2 class=\"my-text-color\">{{ translate(\"productionHiveTitle\") }}</h2>\r\n    <section class=\"line-1\"></section>\r\n    <section>\r\n      <button @click=\"back\" type=\"button\" class=\"btn mt-4 me-3 my-button\">\r\n        <section v-if=\"!isShow\">\r\n          <i class=\"fas fa-arrow-left me-1 act-btn\" aria-hidden=\"true\"></i>\r\n          {{ translate(\"btnBack\") }}\r\n        </section>\r\n        <section\r\n          v-else\r\n          class=\"spinner-border spinner-border-sm\"\r\n          role=\"status\"\r\n        ></section>\r\n      </button>\r\n      <button @click=\"modalHarvest\" type=\"button\" class=\"btn mt-4 my-button\">\r\n        <section v-if=\"!isShow\">\r\n          <i class=\"fas fa-plus me-1 act-btn\" aria-hidden=\"true\"></i>\r\n          {{ translate(\"dashHarvestTitle\") }}\r\n        </section>\r\n        <section\r\n          v-else\r\n          class=\"spinner-border spinner-border-sm\"\r\n          role=\"status\"\r\n        ></section>\r\n      </button>\r\n      <section v-if=\"hasData\" class=\"mt-3\">\r\n        <h5>{{ translate(\"totalHiveProduction\") }} {{ total }} kg</h5>\r\n      </section>\r\n    </section>\r\n\r\n    <section class=\"card p-2 mt-3\" v-if=\"hasData\" style=\"border-radius: 10px\">\r\n      <section class=\"h5 text-center\" id=\"title\" v-html=\"title\"></section>\r\n      <line-chart\r\n        v-if=\"loaded\"\r\n        :data=\"hiveProduction\"\r\n        :min=\"0\"\r\n        :max=\"max\"\r\n        :download=\"true\"\r\n        width=\"100%\"\r\n        class=\"ch\"\r\n        :colors=\"['#a17f05']\"\r\n        :dataset=\"{ borderWidth: 2 }\"\r\n        loading=\"Loading...\"\r\n        xtitle=\"Date\"\r\n        :ytitle=\"ytitle\"\r\n      ></line-chart>\r\n    </section>\r\n    <ModalHarvest\r\n      v-show=\"isModalHarvestVisible\"\r\n      :value=\"value\"\r\n      @close=\"closeModalHarvest\"\r\n      @register=\"register\"\r\n    />\r\n  </section>\r\n</template>\r\n  \r\n  <style scoped>\r\n.bn_card {\r\n  background-color: #ebc002;\r\n  border-radius: 10px;\r\n  width: 100px;\r\n}\r\n\r\n.bn_card:hover {\r\n  background-color: #947902;\r\n}\r\n.spacer {\r\n  height: 200px;\r\n}\r\n</style>\r\n  \r\n  <script>\r\n  import en from \"../assets/en.js\";\r\n  import pt from \"../assets/pt.js\";\r\n  import axios from \"axios\";\r\n  import ModalHarvest from \"../components/ModalHarvest.vue\";\r\n  import { notify } from \"@kyvg/vue3-notification\";\r\n  import { mapGetters } from \"vuex\";\r\n  import {\r\n    GET_USER_TOKEN_GETTER,\r\n    GET_USER_LEVEL_GETTER,\r\n    GET_USER_ID_GETTER,\r\n  } from \"../store/storeconstants\";\r\n  export default {\r\n    name: \"Apiaries\",\r\n    mixins: [en, pt],\r\n    components: {\r\n      ModalHarvest,\r\n    },\r\n    data: function () {\r\n      const lang = localStorage.getItem(\"lang\") || \"pt\";\r\n      return {\r\n        green: require(\"../assets/green.png\"),\r\n        red: require(\"../assets/red.png\"),\r\n        devices: [],\r\n        hiveProduction: [],\r\n        img: require(\"../assets/IMG1220.png\"),\r\n        lang: lang,\r\n        message: {\r\n          type: \"\",\r\n          msg: \"\",\r\n        },\r\n        address: \"\",\r\n        observations: \"\",\r\n        regdate: \"\",\r\n        isShow: true,\r\n        isModalHarvestVisible: false,\r\n        showsection: false,\r\n        toDeleteID: \"\",\r\n        toEditID: \"\",\r\n        toInterventionsID: \"\",\r\n        hasData: false,\r\n        ytitle: \"\",\r\n        title: \"\",\r\n        total: 0,\r\n        value: 0,\r\n      };\r\n    },\r\n    computed: {\r\n      ...mapGetters(\"auth\", {\r\n        token: GET_USER_TOKEN_GETTER,\r\n        level: GET_USER_LEVEL_GETTER,\r\n        _id: GET_USER_ID_GETTER,\r\n        el: \"#app\",\r\n      }),\r\n    },\r\n    created() {\r\n      this.hasData = false;\r\n    },\r\n    mounted() {\r\n      this.getHiveProduction();\r\n      this.getLatestWeight();\r\n    },\r\n    methods: {\r\n      async getHiveProduction() {\r\n        this.ytitle = \"WEIGHT\";\r\n        this.title = this.translate(\"charHarvestHiveTitle\") + \" (kg)\";\r\n        this.max = 100;\r\n        this.loaded = false;\r\n        this.isShow = true;\r\n        this.hiveProduction = [];\r\n        await axios\r\n          .get(\r\n            \"https://bhsapi.duartecota.com/harvest/hive/\" +\r\n              localStorage.getItem(\"hiveIDtoget\"),\r\n            {\r\n              headers: {\r\n                Authorization: this.token,\r\n              },\r\n            }\r\n          )\r\n          .then((response) => {\r\n            let d = response.data.body;\r\n            if (d.length == 0) {\r\n              this.hasData = false;\r\n              this.isShow = false;\r\n              notify({\r\n                title: this.translate(\"notifWarningTitle\"),\r\n                text: this.translate(\"noDataForHive\"),\r\n                type: \"warn\",\r\n                duration: 3000,\r\n                speed: 500,\r\n              });\r\n            } else {\r\n              this.hasData = true;\r\n              for (let i = 0; i < d.length; i++) {\r\n                let lastDate = new Date(\r\n                  d[i].registration_date.toLocaleString(\"sv-SE\", {\r\n                    timeZone: \"Atlantic/Azores\",\r\n                  })\r\n                );\r\n                let tempArray = [];\r\n                let year = lastDate.getFullYear();\r\n                let month = lastDate.getMonth() + 1;\r\n                let day = lastDate.getDate();\r\n                let x = year + \"-\" + month + \"-\" + day;\r\n                tempArray.push(x);\r\n                let y = d[i].weight_registered;\r\n                tempArray.push(y);\r\n                this.hiveProduction.push(tempArray);\r\n              }\r\n              this.loaded = true;\r\n            }\r\n            this.isShow = false;\r\n            this.hiveProduction.forEach((element) => {\r\n              this.total = this.total + element[1];\r\n            });\r\n          })\r\n          .catch(() => {});\r\n      },\r\n      translate(prop) {\r\n        return this[this.lang][prop];\r\n      },\r\n      modalHarvest() {\r\n        this.isModalHarvestVisible = true;\r\n      },\r\n      closeModalHarvest() {\r\n        this.isModalHarvestVisible = false;\r\n      },\r\n      async deleteModal(id) {\r\n        this.toDeleteID = id;\r\n        this.isModalDeleteVisible = true;\r\n      },\r\n      interventions(id) {\r\n        localStorage.setItem(\"idtointerventions\", id);\r\n        this.$router.push(\"interventions\");\r\n      },\r\n      back() {\r\n        this.$router.push(\"productionapiary\");\r\n      },\r\n      loadDetails(id) {\r\n        localStorage.setItem(\"lastroute\", this.$route.path);\r\n        localStorage.setItem(\"hiveIDtoget\", id);\r\n        this.$router.push(\"/hivedetails\");\r\n      },\r\n      loadEditPage(id) {\r\n        localStorage.setItem(\"hiveidtoedit\", id);\r\n        this.$router.push(\"/editdevice\");\r\n      },\r\n      setToUnassign(id) {\r\n        localStorage.setItem(\"idtounassign\", id);\r\n        this.isModalUnassignVisible = true;\r\n      },\r\n      harvest() {\r\n        alert(\"clique\");\r\n      },\r\n      async getLatestWeight() {\r\n        this.isShow = true;\r\n        await axios\r\n          .get(\r\n            \"https://bhsapi.duartecota.com/device/latest/\" +\r\n              localStorage.getItem(\"hiveIDtoget\") +\r\n              \"/\" +\r\n              localStorage.getItem(\"apiaryIDtoget\"),\r\n            {\r\n              headers: {\r\n                Authorization: this.token,\r\n              },\r\n            }\r\n          )\r\n          .then((response) => {\r\n            let device = response.data.body.data;\r\n            if (!device) {\r\n              this.hasData = false;\r\n              this.isShow = false;\r\n            } else {\r\n              this.value = device.w;\r\n            }\r\n            this.isShow = false;\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n            this.isShow = false;\r\n            this.showsection = true;\r\n          });\r\n      },\r\n      async register() {\r\n        this.isModalHarvestVisible = false;\r\n        this.isShow = true;\r\n        let apiary = localStorage.getItem(\"apiaryIDtoget\");\r\n        let hive = localStorage.getItem(\"hiveIDtoget\");\r\n        let weight_registered = parseFloat(localStorage.getItem(\"harvestValue\"));\r\n        console.log(apiary);\r\n        console.log(hive);\r\n        console.log(this.value);\r\n        console.log(weight_registered);\r\n        this.isShow = false;\r\n        let postData = {\r\n          user: this._id,\r\n          apiary: apiary,\r\n          device: hive,\r\n          weight_reported: this.value,\r\n          weight_registered: parseFloat(localStorage.getItem(\"harvestValue\")),\r\n        };\r\n        await axios\r\n          .post(\"https://bhsapi.duartecota.com/harvest\", postData, {\r\n            headers: {\r\n              Authorization: this.token,\r\n            },\r\n          })\r\n          .then((response) => {\r\n            if (response.data.http == 201) {\r\n              this.isShow = false;\r\n              notify({\r\n                title: this.translate(\"notifSuccessTitle\"),\r\n                text: this.translate(\"mesNewHarvest\"),\r\n                type: \"success\",\r\n                duration: 3000,\r\n                speed: 500,\r\n              });\r\n            } else {\r\n              this.isShow = false;\r\n              notify({\r\n                title: this.translate(\"notifErrorTitle\"),\r\n                text: this.translate(\"mesProblem\"),\r\n                type: \"error\",\r\n                duration: 3000,\r\n                speed: 500,\r\n              });\r\n            }\r\n          })\r\n          .catch(() => {\r\n            this.isShow = false;\r\n            notify({\r\n              title: this.translate(\"notifErrorTitle\"),\r\n              text: this.translate(\"mesProblem\"),\r\n              type: \"error\",\r\n              duration: 3000,\r\n              speed: 500,\r\n            });\r\n          });\r\n      },\r\n    },\r\n  };\r\n</script>\r\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}