{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport en from \"../assets/en.js\";\nimport pt from \"../assets/pt.js\";\nimport axios from \"axios\";\nimport { notify } from \"@kyvg/vue3-notification\";\nimport ModalDetails from \"../components/ModalInterventionDetails.vue\";\nimport ModalDelete from \"@/components/ModalDeleteIntervention.vue\";\nimport ModalConclude from \"@/components/ModalInterventionConcluded.vue\";\nexport default {\n  components: {\n    ModalDetails,\n    ModalDelete,\n    ModalConclude\n  },\n  mixins: [en, pt],\n  data() {\n    const lang = localStorage.getItem(\"lang\") || \"pt\";\n    return {\n      interventions: [],\n      lang: lang,\n      isShow: false,\n      hasInterventions: false,\n      isModalDetailsVisible: false,\n      isModalDeleteVisible: false,\n      isModalConcludeVisible: false,\n      description: \"\",\n      observations: \"\",\n      type: \"\",\n      color: \"\",\n      interventiontoedit: \"\",\n      warnForIntervention: false\n    };\n  },\n  computed: {\n    attributes() {\n      return [...this.interventions.map(todo => ({\n        _id: todo._id,\n        dates: todo.dates,\n        highlight: {\n          color: todo.color,\n          start: {\n            fillMode: \"solid\",\n            color: todo.isComplete ? \"gray\" : todo.color\n          },\n          base: {\n            fillMode: \"light\",\n            color: todo.isComplete ? \"gray\" : todo.color\n          },\n          end: {\n            fillMode: \"solid\",\n            color: todo.isComplete ? \"gray\" : todo.color\n          }\n        },\n        popover: {\n          label: todo.description,\n          visibility: \"hover\"\n        }\n      }))];\n    }\n  },\n  mounted() {\n    this.getInterventions();\n  },\n  methods: {\n    async getInterventions() {\n      this.interventions = [];\n      this.isShow = true;\n      await axios.get(\"https://bhsapi.duartecota.com/intervention/apiary/\" + localStorage.getItem(\"idtointerventions\"), {\n        headers: {\n          Authorization: this.token\n        }\n      }).then(response => {\n        this.isShow = false;\n        if (response.data.body.length == 0) {\n          this.hasInterventions = false;\n          notify({\n            title: this.translate(\"notifWarningTitle\"),\n            text: this.translate(\"mesNoInterventions\"),\n            type: \"warn\",\n            duration: 3000,\n            speed: 500\n          });\n        } else {\n          this.hasInterventions = true;\n          this.interventions = [];\n          let resArray = response.data.body;\n          for (let i = 0; i < resArray.length; i++) {\n            let sd = new Date(resArray[i].startDate);\n            let ed = new Date(resArray[i].endDate);\n            let dates = \"\";\n            dates = {\n              start: sd,\n              end: ed\n            };\n            let color = \"\";\n            if (resArray[i].type == 1) color = \"green\";else if (resArray[i].type == 2) color = \"orange\";else color = \"red\";\n            let today = new Date();\n            if ((sd < today || ed < today) && resArray[i].concluded == false) {\n              color = \"gray\";\n              this.warnForIntervention = true;\n            }\n            this.interventions.push({\n              _id: resArray[i]._id,\n              color: color,\n              dates: dates,\n              description: resArray[i].description,\n              startTime: resArray[i].startTime,\n              endTime: resArray[i].endTime,\n              observations: resArray[i].observations,\n              type: resArray[i].type,\n              isComplete: resArray[i].concluded\n            });\n          }\n          if (this.warnForIntervention) {\n            notify({\n              title: this.translate(\"notifWarningTitle\"),\n              text: this.translate(\"notInterventionPassed\"),\n              type: \"warn\",\n              duration: 3000,\n              speed: 500\n            });\n          }\n        }\n      }).catch(() => {\n        this.isShow = false;\n        notify({\n          title: this.translate(\"notifErrorTitle\"),\n          text: this.translate(\"mesProblem\"),\n          type: \"error\",\n          duration: 3000,\n          speed: 500\n        });\n      });\n    },\n    async _delete() {\n      this.isModalDeleteVisible = false;\n      this.isShow = true;\n      let id = localStorage.getItem(\"interventiontoedit\");\n      await axios.delete(\"https://bhsapi.duartecota.com/intervention/one/\" + id, {\n        headers: {\n          Authorization: this.token\n        }\n      }).then(response => {\n        if (response.data.http == 200) {\n          this.isShow = false;\n          notify({\n            title: this.translate(\"notifSuccessTitle\"),\n            text: this.translate(\"deleteInterventionMessage\"),\n            type: \"success\",\n            duration: 3000,\n            speed: 500\n          });\n          this.getInterventions();\n        } else {\n          this.isShow = false;\n          notify({\n            title: this.translate(\"notifErrorTitle\"),\n            text: this.translate(\"mesProblem\"),\n            type: \"error\",\n            duration: 3000,\n            speed: 500\n          });\n        }\n      }).catch(() => {\n        this.isShow = false;\n        notify({\n          title: this.translate(\"notifErrorTitle\"),\n          text: this.translate(\"mesProblem\"),\n          type: \"error\",\n          duration: 3000,\n          speed: 500\n        });\n      });\n    },\n    translate(prop) {\n      return this[this.lang][prop];\n    },\n    padTo2Digits(num) {\n      return String(num).padStart(2, \"0\");\n    },\n    dayClicked(day) {\n      this.interventiontoedit = \"\";\n      let date = new Date(day.id);\n      for (let i = 0; i < this.interventions.length; i++) {\n        let sd = new Date(this.interventions[i].dates.start);\n        let sdConv = this.padTo2Digits(sd.toLocaleDateString(\"sv-SE\", {\n          year: \"numeric\",\n          month: \"2-digit\",\n          day: \"2-digit\"\n        }));\n        let sdFinal = new Date(sdConv);\n        let ed = new Date(this.interventions[i].dates.end);\n        let edConv = this.padTo2Digits(ed.toLocaleDateString(\"sv-SE\", {\n          year: \"numeric\",\n          month: \"2-digit\",\n          day: \"2-digit\"\n        }));\n        let edFinal = new Date(edConv);\n        if (date.getTime() >= sdFinal.getTime() && date.getTime() <= edFinal.getTime()) {\n          let type = this.interventions[i].type;\n          switch (type) {\n            case 1:\n              this.type = this.translate(\"formNewInterventionType1\");\n              break;\n            case 2:\n              this.type = this.translate(\"formNewInterventionType2\");\n              break;\n            case 3:\n              this.type = this.translate(\"formNewInterventionType3\");\n              break;\n          }\n          /*this.interventiontoedit = this.interventions[i]._id;\r\n            localStorage.setItem(\"interventiontoedit\", this.interventiontoedit);\r\n            this.description = this.interventions[i].description;\r\n            this.observations = this.interventions[i].observations;\r\n            this.color = this.interventions[i].color;\r\n            this.isModalDetailsVisible = true;\r\n            break;*/\n          let instance = {\n            _id: this.interventions[i]._id,\n            apiary: this.interventions[i].apiary,\n            address: this.interventions[i].address,\n            location: this.interventions[i].location,\n            ap_observations: this.interventions[i].ap_observations,\n            color: this.interventions[i].color,\n            startDate: sdConv,\n            endDate: edConv,\n            startTime: this.interventions[i].startTime,\n            endTime: this.interventions[i].endTime,\n            description: this.interventions[i].description,\n            observations: this.interventions[i].observations\n          };\n          this.details.push(instance);\n        }\n        this.isModalDetailsVisible = true;\n      }\n    },\n    back() {\n      this.$router.push(\"apiaries\");\n    },\n    formNew() {\n      this.$router.push(\"newintervention\");\n    },\n    closeDetailsModal() {\n      this.isModalDetailsVisible = false;\n    },\n    closeDeleteModal() {\n      this.isModalDeleteVisible = false;\n    },\n    closeConcludeModal() {\n      this.isModalConcludeVisible = false;\n    },\n    edit() {\n      this.isModalDetailsVisible = false;\n      //localStorage.setItem(\"interventiontoedit\", this.interventiontoedit);\n      this.$router.push(\"editintervention\");\n    },\n    async conclude() {\n      this.isModalConcludeVisible = false;\n      this.isShow = true;\n      let id = localStorage.getItem(\"interventiontoedit\");\n      await axios.put(\"https://bhsapi.duartecota.com/intervention/one/\" + id, {\n        headers: {\n          Authorization: this.token\n        }\n      }).then(response => {\n        if (response.data.http == 200) {\n          this.isShow = false;\n          notify({\n            title: this.translate(\"notifSuccessTitle\"),\n            text: this.translate(\"concludeInterventionMessage\"),\n            type: \"success\",\n            duration: 3000,\n            speed: 500\n          });\n          this.warnForIntervention = false;\n          this.getInterventions();\n        } else {\n          this.isShow = false;\n          notify({\n            title: this.translate(\"notifErrorTitle\"),\n            text: this.translate(\"mesProblem\"),\n            type: \"error\",\n            duration: 3000,\n            speed: 500\n          });\n        }\n      }).catch(() => {\n        this.isShow = false;\n        notify({\n          title: this.translate(\"notifErrorTitle\"),\n          text: this.translate(\"mesProblem\"),\n          type: \"error\",\n          duration: 3000,\n          speed: 500\n        });\n      });\n    },\n    clickcancel() {\n      this.isModalDetailsVisible = false;\n      this.isModalDeleteVisible = true;\n    },\n    clickConclude() {\n      this.isModalDetailsVisible = false;\n      this.isModalConcludeVisible = true;\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["en","pt","axios","notify","ModalDetails","ModalDelete","ModalConclude","components","mixins","data","lang","localStorage","getItem","interventions","isShow","hasInterventions","isModalDetailsVisible","isModalDeleteVisible","isModalConcludeVisible","description","observations","type","color","interventiontoedit","warnForIntervention","computed","attributes","map","todo","_id","dates","highlight","start","fillMode","isComplete","base","end","popover","label","visibility","mounted","getInterventions","methods","get","headers","Authorization","token","then","response","body","length","title","translate","text","duration","speed","resArray","i","sd","Date","startDate","ed","endDate","today","concluded","push","startTime","endTime","catch","_delete","id","delete","http","prop","padTo2Digits","num","String","padStart","dayClicked","day","date","sdConv","toLocaleDateString","year","month","sdFinal","edConv","edFinal","getTime","instance","apiary","address","location","ap_observations","details","back","$router","formNew","closeDetailsModal","closeDeleteModal","closeConcludeModal","edit","conclude","put","clickcancel","clickConclude"],"sourceRoot":"","sources":["C:\\Users\\duart\\OneDrive - PGA\\Ambiente de Trabalho\\bhivesenseweb\\bhivesenseweb\\src\\views\\Interventions.vue"],"sourcesContent":["<template>\r\n  <section class=\"container my-body\">\r\n    <h2 class=\"my-text-color\">{{ translate(\"interventionsTitle\") }}</h2>\r\n    <section class=\"line-1\"></section>\r\n    <section class=\"mt-4\">\r\n      <button @click=\"formNew\" class=\"btn my-button me-3\">\r\n        <section v-if=\"!isShow\">\r\n          <i class=\"fa-solid fa-calendar\"></i>\r\n          {{ translate(\"btnSchedule\") }}\r\n        </section>\r\n        <section\r\n          v-else\r\n          class=\"spinner-border spinner-border-sm\"\r\n          role=\"status\"\r\n        ></section>\r\n      </button>\r\n      <!--<button @click=\"back\" class=\"btn my-button\">\r\n        <section v-if=\"!isShow\">\r\n          <i class=\"fas fa-arrow-left me-1 act-btn\" aria-hidden=\"true\"></i>\r\n          {{ translate(\"btnBack\") }}\r\n        </section>\r\n        <section\r\n          v-else\r\n          class=\"spinner-border spinner-border-sm\"\r\n          role=\"status\"\r\n        ></section>\r\n      </button>-->\r\n    </section>\r\n\r\n    <section class=\"mt-4\" v-if=\"hasInterventions != false\">\r\n      <v-calendar\r\n        :locale=\"lang\"\r\n        is-expanded\r\n        :attributes=\"attributes\"\r\n        :rows=\"1\"\r\n        :columns=\"3\"\r\n        @dayclick=\"dayClicked\"\r\n      >\r\n      </v-calendar>\r\n    </section>\r\n\r\n    <ModalDetails\r\n      v-show=\"isModalDetailsVisible\"\r\n      @close=\"closeDetailsModal\"\r\n      @edit=\"edit\"\r\n      @done=\"clickConclude\"\r\n      @delete=\"clickcancel\"\r\n      :description=\"description\"\r\n      :observations=\"observations\"\r\n      :type=\"type\"\r\n      :color=\"color\"\r\n    />\r\n\r\n    <ModalDelete\r\n      v-show=\"isModalDeleteVisible\"\r\n      @close=\"closeDeleteModal\"\r\n      @deleteAction=\"_delete\"\r\n    />\r\n\r\n    <ModalConclude\r\n      v-show=\"isModalConcludeVisible\"\r\n      @close=\"closeConcludeModal\"\r\n      @conclude=\"conclude\"\r\n    />\r\n  </section>\r\n</template>\r\n\r\n<style scoped>\r\n</style>\r\n\r\n<script>\r\n  import en from \"../assets/en.js\";\r\n  import pt from \"../assets/pt.js\";\r\n  import axios from \"axios\";\r\n  import { notify } from \"@kyvg/vue3-notification\";\r\n  import ModalDetails from \"../components/ModalInterventionDetails.vue\";\r\n  import ModalDelete from \"@/components/ModalDeleteIntervention.vue\";\r\n  import ModalConclude from \"@/components/ModalInterventionConcluded.vue\";\r\n  export default {\r\n    components: {\r\n      ModalDetails,\r\n      ModalDelete,\r\n      ModalConclude,\r\n    },\r\n    mixins: [en, pt],\r\n    data() {\r\n      const lang = localStorage.getItem(\"lang\") || \"pt\";\r\n      return {\r\n        interventions: [],\r\n        lang: lang,\r\n        isShow: false,\r\n        hasInterventions: false,\r\n        isModalDetailsVisible: false,\r\n        isModalDeleteVisible: false,\r\n        isModalConcludeVisible: false,\r\n        description: \"\",\r\n        observations: \"\",\r\n        type: \"\",\r\n        color: \"\",\r\n        interventiontoedit: \"\",\r\n        warnForIntervention: false,\r\n      };\r\n    },\r\n    computed: {\r\n      attributes() {\r\n        return [\r\n          ...this.interventions.map((todo) => ({\r\n            _id: todo._id,\r\n            dates: todo.dates,\r\n            highlight: {\r\n              color: todo.color,\r\n              start: {\r\n                fillMode: \"solid\",\r\n                color: todo.isComplete ? \"gray\" : todo.color,\r\n              },\r\n              base: {\r\n                fillMode: \"light\",\r\n                color: todo.isComplete ? \"gray\" : todo.color,\r\n              },\r\n              end: {\r\n                fillMode: \"solid\",\r\n                color: todo.isComplete ? \"gray\" : todo.color,\r\n              },\r\n            },\r\n            popover: {\r\n              label: todo.description,\r\n              visibility: \"hover\",\r\n            },\r\n          })),\r\n        ];\r\n      },\r\n    },\r\n    mounted() {\r\n      this.getInterventions();\r\n    },\r\n    methods: {\r\n      async getInterventions() {\r\n        this.interventions = [];\r\n        this.isShow = true;\r\n        await axios\r\n          .get(\r\n            \"https://bhsapi.duartecota.com/intervention/apiary/\" +\r\n              localStorage.getItem(\"idtointerventions\"),\r\n            {\r\n              headers: {\r\n                Authorization: this.token,\r\n              },\r\n            }\r\n          )\r\n          .then((response) => {\r\n            this.isShow = false;\r\n            if (response.data.body.length == 0) {\r\n              this.hasInterventions = false;\r\n              notify({\r\n                title: this.translate(\"notifWarningTitle\"),\r\n                text: this.translate(\"mesNoInterventions\"),\r\n                type: \"warn\",\r\n                duration: 3000,\r\n                speed: 500,\r\n              });\r\n            } else {\r\n              this.hasInterventions = true;\r\n              this.interventions = [];\r\n              let resArray = response.data.body;\r\n              for (let i = 0; i < resArray.length; i++) {\r\n                let sd = new Date(resArray[i].startDate);\r\n                let ed = new Date(resArray[i].endDate);\r\n                let dates = \"\";\r\n                dates = {\r\n                  start: sd,\r\n                  end: ed,\r\n                };\r\n                let color = \"\";\r\n                if (resArray[i].type == 1) color = \"green\";\r\n                else if (resArray[i].type == 2) color = \"orange\";\r\n                else color = \"red\";\r\n                let today = new Date();\r\n                if (\r\n                  (sd < today || ed < today) &&\r\n                  resArray[i].concluded == false\r\n                ) {\r\n                  color = \"gray\";\r\n                  this.warnForIntervention = true;\r\n                }\r\n                this.interventions.push({\r\n                  _id: resArray[i]._id,\r\n                  color: color,\r\n                  dates: dates,\r\n                  description: resArray[i].description,\r\n                  startTime: resArray[i].startTime,\r\n                  endTime: resArray[i].endTime,\r\n                  observations: resArray[i].observations,\r\n                  type: resArray[i].type,\r\n                  isComplete: resArray[i].concluded,\r\n                });\r\n              }\r\n              if (this.warnForIntervention) {\r\n                notify({\r\n                  title: this.translate(\"notifWarningTitle\"),\r\n                  text: this.translate(\"notInterventionPassed\"),\r\n                  type: \"warn\",\r\n                  duration: 3000,\r\n                  speed: 500,\r\n                });\r\n              }\r\n            }\r\n          })\r\n          .catch(() => {\r\n            this.isShow = false;\r\n            notify({\r\n              title: this.translate(\"notifErrorTitle\"),\r\n              text: this.translate(\"mesProblem\"),\r\n              type: \"error\",\r\n              duration: 3000,\r\n              speed: 500,\r\n            });\r\n          });\r\n      },\r\n      async _delete() {\r\n        this.isModalDeleteVisible = false;\r\n        this.isShow = true;\r\n        let id = localStorage.getItem(\"interventiontoedit\");\r\n        await axios\r\n          .delete(\"https://bhsapi.duartecota.com/intervention/one/\" + id, {\r\n            headers: {\r\n              Authorization: this.token,\r\n            },\r\n          })\r\n          .then((response) => {\r\n            if (response.data.http == 200) {\r\n              this.isShow = false;\r\n              notify({\r\n                title: this.translate(\"notifSuccessTitle\"),\r\n                text: this.translate(\"deleteInterventionMessage\"),\r\n                type: \"success\",\r\n                duration: 3000,\r\n                speed: 500,\r\n              });\r\n              this.getInterventions();\r\n            } else {\r\n              this.isShow = false;\r\n              notify({\r\n                title: this.translate(\"notifErrorTitle\"),\r\n                text: this.translate(\"mesProblem\"),\r\n                type: \"error\",\r\n                duration: 3000,\r\n                speed: 500,\r\n              });\r\n            }\r\n          })\r\n          .catch(() => {\r\n            this.isShow = false;\r\n            notify({\r\n              title: this.translate(\"notifErrorTitle\"),\r\n              text: this.translate(\"mesProblem\"),\r\n              type: \"error\",\r\n              duration: 3000,\r\n              speed: 500,\r\n            });\r\n          });\r\n      },\r\n      translate(prop) {\r\n        return this[this.lang][prop];\r\n      },\r\n      padTo2Digits(num) {\r\n        return String(num).padStart(2, \"0\");\r\n      },\r\n      dayClicked(day) {\r\n        this.interventiontoedit = \"\";\r\n        let date = new Date(day.id);\r\n        for (let i = 0; i < this.interventions.length; i++) {\r\n          let sd = new Date(this.interventions[i].dates.start);\r\n          let sdConv = this.padTo2Digits(\r\n            sd.toLocaleDateString(\"sv-SE\", {\r\n              year: \"numeric\",\r\n              month: \"2-digit\",\r\n              day: \"2-digit\",\r\n            })\r\n          );\r\n          let sdFinal = new Date(sdConv);\r\n          let ed = new Date(this.interventions[i].dates.end);\r\n          let edConv = this.padTo2Digits(\r\n            ed.toLocaleDateString(\"sv-SE\", {\r\n              year: \"numeric\",\r\n              month: \"2-digit\",\r\n              day: \"2-digit\",\r\n            })\r\n          );\r\n          let edFinal = new Date(edConv);\r\n          if (\r\n            date.getTime() >= sdFinal.getTime() &&\r\n            date.getTime() <= edFinal.getTime()\r\n          ) {\r\n            let type = this.interventions[i].type;\r\n            switch (type) {\r\n              case 1:\r\n                this.type = this.translate(\"formNewInterventionType1\");\r\n                break;\r\n              case 2:\r\n                this.type = this.translate(\"formNewInterventionType2\");\r\n                break;\r\n              case 3:\r\n                this.type = this.translate(\"formNewInterventionType3\");\r\n                break;\r\n            }\r\n            /*this.interventiontoedit = this.interventions[i]._id;\r\n              localStorage.setItem(\"interventiontoedit\", this.interventiontoedit);\r\n              this.description = this.interventions[i].description;\r\n              this.observations = this.interventions[i].observations;\r\n              this.color = this.interventions[i].color;\r\n              this.isModalDetailsVisible = true;\r\n              break;*/\r\n            let instance = {\r\n              _id: this.interventions[i]._id,\r\n              apiary: this.interventions[i].apiary,\r\n              address: this.interventions[i].address,\r\n              location: this.interventions[i].location,\r\n              ap_observations: this.interventions[i].ap_observations,\r\n              color: this.interventions[i].color,\r\n              startDate: sdConv,\r\n              endDate: edConv,\r\n              startTime: this.interventions[i].startTime,\r\n              endTime: this.interventions[i].endTime,\r\n              description: this.interventions[i].description,\r\n              observations: this.interventions[i].observations,\r\n            };\r\n            this.details.push(instance);\r\n          }\r\n          this.isModalDetailsVisible = true;\r\n        }\r\n      },\r\n      back() {\r\n        this.$router.push(\"apiaries\");\r\n      },\r\n      formNew() {\r\n        this.$router.push(\"newintervention\");\r\n      },\r\n      closeDetailsModal() {\r\n        this.isModalDetailsVisible = false;\r\n      },\r\n      closeDeleteModal() {\r\n        this.isModalDeleteVisible = false;\r\n      },\r\n      closeConcludeModal() {\r\n        this.isModalConcludeVisible = false;\r\n      },\r\n      edit() {\r\n        this.isModalDetailsVisible = false;\r\n        //localStorage.setItem(\"interventiontoedit\", this.interventiontoedit);\r\n        this.$router.push(\"editintervention\");\r\n      },\r\n      async conclude() {\r\n        this.isModalConcludeVisible = false;\r\n        this.isShow = true;\r\n        let id = localStorage.getItem(\"interventiontoedit\");\r\n        await axios\r\n          .put(\"https://bhsapi.duartecota.com/intervention/one/\" + id, {\r\n            headers: {\r\n              Authorization: this.token,\r\n            },\r\n          })\r\n          .then((response) => {\r\n            if (response.data.http == 200) {\r\n              this.isShow = false;\r\n              notify({\r\n                title: this.translate(\"notifSuccessTitle\"),\r\n                text: this.translate(\"concludeInterventionMessage\"),\r\n                type: \"success\",\r\n                duration: 3000,\r\n                speed: 500,\r\n              });\r\n              this.warnForIntervention = false;\r\n              this.getInterventions();\r\n            } else {\r\n              this.isShow = false;\r\n              notify({\r\n                title: this.translate(\"notifErrorTitle\"),\r\n                text: this.translate(\"mesProblem\"),\r\n                type: \"error\",\r\n                duration: 3000,\r\n                speed: 500,\r\n              });\r\n            }\r\n          })\r\n          .catch(() => {\r\n            this.isShow = false;\r\n            notify({\r\n              title: this.translate(\"notifErrorTitle\"),\r\n              text: this.translate(\"mesProblem\"),\r\n              type: \"error\",\r\n              duration: 3000,\r\n              speed: 500,\r\n            });\r\n          });\r\n      },\r\n      clickcancel() {\r\n        this.isModalDetailsVisible = false;\r\n        this.isModalDeleteVisible = true;\r\n      },\r\n      clickConclude() {\r\n        this.isModalDetailsVisible = false;\r\n        this.isModalConcludeVisible = true;\r\n      },\r\n    },\r\n  };\r\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}